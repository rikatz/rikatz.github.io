<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on The Katz Experiments</title><link>https://www.rkatz.xyz/post/</link><description>Recent content in Posts on The Katz Experiments</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Sun, 12 Sep 2021 23:00:00 -0300</lastBuildDate><atom:link href="https://www.rkatz.xyz/post/index.xml" rel="self" type="application/rss+xml"/><item><title>NGINX NJS Experiments - Dynamic Backends</title><link>https://www.rkatz.xyz/post/2021-09-13-nginx-njs-experiments/</link><pubDate>Sun, 12 Sep 2021 23:00:00 -0300</pubDate><guid>https://www.rkatz.xyz/post/2021-09-13-nginx-njs-experiments/</guid><description>
&lt;h1 id="nginx-njs-and-the-dynamic-config">NGINX NJS and the dynamic config&lt;/h1>
&lt;p>Recently, due to some bugs in Ingress NGINX I have decided to look into alternatives on the dynamic upstream configuration.&lt;/p>
&lt;p>For those not familiar with Ingress NGINX dynamic configuration, it relies massively on Lua and &lt;a href="https://github.com/openresty/lua-nginx-module">Openresty components&lt;/a> to allow the reconfiguration of backends without restarting NGINX process, for example.&lt;/p>
&lt;p>More and more features have been added to the Lua/openresty side of Ingress due to how &amp;ldquo;easy&amp;rdquo; it is to implement, for example different load balancing alghorithms, canary balancing and even global rate limit. I&amp;rsquo;m pretty null at Lua coding, but other Ingress NGINX maintainers have been doing that pretty well!&lt;/p>
&lt;p>So, I decided to look to alternatives. Not because Openresty and Lua are bad technologies. Opposite to that, those are pretty mature and stable technologies, and widely used in cool things like Kong API Gateway (&lt;a href="https://konghq.com/kong/),">https://konghq.com/kong/),&lt;/a> Curiefense WAF (&lt;a href="https://www.curiefense.io/">https://www.curiefense.io/&lt;/a>) and also as Envoy and HAProxy filters.&lt;/p>
&lt;p>The reason I decided to do that is a simple question I did to myself: &amp;ldquo;can we do better? Can we improve this somehow? What can I learn from this?&amp;rdquo;&lt;/p>
&lt;p>For this article, I will reproduce the most used Lua part of Ingress NGINX: dynamic upstreams. Not as complete as the real one, or with all features, but just for fun.&lt;/p>
&lt;p>I will put all of the experiments here in [github.com/rikatz/njs-experiments]&lt;/p>
&lt;h1 id="nginx-njs-scripting-language">NGINX NJS scripting language&lt;/h1>
&lt;p>Back to 2015 (I guess…) NGINX Inc announced a new feature in NGINX, called ngiScript, which turned later into NJS. NJS allows one to write the behavior of NGINX based on Javascript language.&lt;/p>
&lt;p>It&amp;rsquo;s not as wide as the whole Javascript language but still allows one to do some cool things. There are some few examples &lt;a href="https://nginx.org/en/docs/njs/examples.html">here&lt;/a> and &lt;a href="https://github.com/xeioex/njs-examples">here&lt;/a> like creating some JWT signing or even an S3 Gateway&amp;rsquo;ish. You may find more examples in &lt;a href="https://www.nginx.com/blog/tag/nginx-javascript-module/">https://www.nginx.com/blog/tag/nginx-javascript-module/&lt;/a> and also googling around there about people using NJS as an antispam bot, etc.&lt;/p>
&lt;p>Overall, you need to think on NJS by some perspectives:&lt;/p>
&lt;ul>
&lt;li>It is NOT as complete as Lua. You can vendor some external &lt;a href="https://nginx.org/en/docs/njs/node_modules.html">nodejs modules&lt;/a> but do you really wanna download half the internet to process something? (npm joke here&amp;hellip;sorry…)&lt;/li>
&lt;li>For ever request that your server needs to deal with, it creates a small thread to run your javascript. It is pretty fast, but still you may end adding some latency in the processing of your requests. I haven&amp;rsquo;t tested it (yet!) to see the performance differences between Lua x NJS.&lt;/li>
&lt;li>NJS is a core module from NGINX. While to make Lua work you need some Openresty external stuff, LuaJIT and other things that can go wrong, NJS is part of Nginx code. It&amp;rsquo;s not installed as default, but you can simple download it from official NGINX package repo (or compile), and its version relates to the version you are using in NGINX (while with Openresty you are sort of stuck with previous versions, like v1.19, although we use it with NGINX v1.20 in Ingress NGINX).&lt;/li>
&lt;/ul>
&lt;p>See more here: [https://www.nginx.com/blog/harnessing-power-convenience-of-javascript-for-each-request-with-nginx-javascript-module/]&lt;/p>
&lt;h1 id="starting-simple">Starting simple&lt;/h1>
&lt;p>So my first experiment: &lt;strong>The hello world&lt;/strong> example.&lt;/p>
&lt;p>Because I&amp;rsquo;m too lazy to install a new machine and do all the required things, I&amp;rsquo;ve just used the &amp;ldquo;nginx:stable&amp;rdquo; docker image that have everything built in.&lt;/p>
&lt;p>So, imagine that this is my current filesystem:&lt;/p>
&lt;ul>
&lt;li>etc/nginx.conf -&amp;gt; Where nginx conf lives&lt;/li>
&lt;li>njs/ -&amp;gt; Where my njs scripts live&lt;/li>
&lt;/ul>
&lt;p>My first approach is:&lt;/p>
&lt;ul>
&lt;li>etc/nginx.conf&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="ln"> 1&lt;/span>load_module modules/ngx_http_js_module.so;
&lt;span class="ln"> 2&lt;/span>events {}
&lt;span class="ln"> 3&lt;/span>http {
&lt;span class="ln"> 4&lt;/span> js_import /etc/nginx/njs/http.js;
&lt;span class="ln"> 5&lt;/span> server {
&lt;span class="ln"> 6&lt;/span> listen 80;
&lt;span class="ln"> 7&lt;/span> location / {
&lt;span class="ln"> 8&lt;/span> js_content http.hello;
&lt;span class="ln"> 9&lt;/span> }
&lt;span class="ln">10&lt;/span> }
&lt;span class="ln">11&lt;/span>}
&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>njs/http.js&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="ln">1&lt;/span>&lt;span class="kd">function&lt;/span> &lt;span class="nx">hello&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">r&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln">2&lt;/span> &lt;span class="nx">r&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">error&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">JSON&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">stringify&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">r&lt;/span>&lt;span class="p">));&lt;/span>
&lt;span class="ln">3&lt;/span> &lt;span class="nx">r&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="k">return&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">200&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;Hello world!&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="ln">4&lt;/span>&lt;span class="p">}&lt;/span>
&lt;span class="ln">5&lt;/span>&lt;span class="kr">export&lt;/span> &lt;span class="k">default&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="nx">hello&lt;/span>&lt;span class="p">};&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Not getting too deep into Javascript, but basically this:&lt;/p>
&lt;ul>
&lt;li>Will import the njs/http.js as a module&lt;/li>
&lt;li>Call the function http.hello every time someone calls our server on port 80 and location /&lt;/li>
&lt;li>Will log as an error (just for sake of debugging) the content of our request in servers log&lt;/li>
&lt;li>Will return a &lt;code>200-OK Hello world&lt;/code> to our browser&lt;/li>
&lt;/ul>
&lt;p>So, running this container as:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="ln">1&lt;/span>docker run -it -p 18080:80 -v $PWD/etc/nginx.conf:/etc/nginx/nginx.conf -v $PWD/njs/:/etc/nginx/njs/ --rm nginx:stable
&lt;/code>&lt;/pre>&lt;/div>&lt;p>And calling it with &lt;code>curl http://127.0.0.1:18080/lalala?test=xpto&lt;/code> we get a Hello world, and the following log:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="ln">1&lt;/span>2021/09/12 23:59:16 [error] 32#32: *1 js: {&amp;#34;status&amp;#34;:0,&amp;#34;args&amp;#34;:{&amp;#34;test&amp;#34;:&amp;#34;xpto&amp;#34;},&amp;#34;httpVersion&amp;#34;:&amp;#34;1.1&amp;#34;,&amp;#34;remoteAddress&amp;#34;:&amp;#34;172.17.0.1&amp;#34;,&amp;#34;headersOut&amp;#34;:{},&amp;#34;method&amp;#34;:&amp;#34;GET&amp;#34;,&amp;#34;uri&amp;#34;:&amp;#34;/lalala&amp;#34;,&amp;#34;headersIn&amp;#34;:{&amp;#34;Host&amp;#34;:&amp;#34;127.0.0.1:18080&amp;#34;,&amp;#34;User-Agent&amp;#34;:&amp;#34;curl/7.74.0&amp;#34;,&amp;#34;Accept&amp;#34;:&amp;#34;*/*&amp;#34;}}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Nice uh. So, by the log, we know that there is a bunch of stuff we can extract from our requests (see the Reference &lt;a href="https://nginx.org/en/docs/njs/reference.html">https://nginx.org/en/docs/njs/reference.html&lt;/a>)&lt;/p>
&lt;h1 id="doing-some-dynamic-backend-experiments">Doing some dynamic backend experiments&lt;/h1>
&lt;p>So now we know that we can extract Headers and URI with Javascript, which are two important parts that can help us on the routing decision.&lt;/p>
&lt;p>Let&amp;rsquo;s then write a new Javascript that returns an upstream based on the Host information:&lt;/p>
&lt;ul>
&lt;li>njs/perhost.js&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="ln"> 1&lt;/span>&lt;span class="kd">function&lt;/span> &lt;span class="nx">getUpstream&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">req&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln"> 2&lt;/span> &lt;span class="kd">var&lt;/span> &lt;span class="nx">host&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln"> 3&lt;/span> &lt;span class="nx">host&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">req&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">headersIn&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s1">&amp;#39;Host&amp;#39;&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="nx">toLowerCase&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="ln"> 4&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">host&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="s2">&amp;#34;mydomain1.com&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln"> 5&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="s2">&amp;#34;https://www.google.com&amp;#34;&lt;/span>
&lt;span class="ln"> 6&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="ln"> 7&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">host&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="s2">&amp;#34;mydomain2.com&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln"> 8&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="s2">&amp;#34;https://www.amazon.com&amp;#34;&lt;/span>
&lt;span class="ln"> 9&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="ln">10&lt;/span> &lt;span class="nx">req&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="k">return&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">404&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;Backend not found&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="ln">11&lt;/span> &lt;span class="nx">req&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">finish&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="ln">12&lt;/span> &lt;span class="c1">// Invalid return just so it wont complain
&lt;/span>&lt;span class="ln">13&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="s2">&amp;#34;@invalidstuff&amp;#34;&lt;/span>
&lt;span class="ln">14&lt;/span>&lt;span class="p">}&lt;/span>
&lt;span class="ln">15&lt;/span>
&lt;span class="ln">16&lt;/span>&lt;span class="kr">export&lt;/span> &lt;span class="k">default&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="nx">getUpstream&lt;/span>&lt;span class="p">};&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>etc/nginx.conf&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="ln"> 1&lt;/span>load_module modules/ngx_http_js_module.so;
&lt;span class="ln"> 2&lt;/span>events {}
&lt;span class="ln"> 3&lt;/span>http {
&lt;span class="ln"> 4&lt;/span> resolver 8.8.8.8;
&lt;span class="ln"> 5&lt;/span> js_import &amp;#34;/etc/nginx/njs/perhost.js&amp;#34;;
&lt;span class="ln"> 6&lt;/span> js_set $upstream perhost.getUpstream;
&lt;span class="ln"> 7&lt;/span> server {
&lt;span class="ln"> 8&lt;/span> listen 80;
&lt;span class="ln"> 9&lt;/span> location / {
&lt;span class="ln">10&lt;/span> proxy_pass $upstream;
&lt;span class="ln">11&lt;/span> }
&lt;span class="ln">12&lt;/span> }
&lt;span class="ln">13&lt;/span>}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Doing some tests now, we can see that:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="ln">1&lt;/span>curl -H &amp;#34;mydomain1.com&amp;#34; http://127.0.0.1:18080 # Returns Google
&lt;span class="ln">2&lt;/span>curl -H &amp;#34;mydomain2.com&amp;#34; http://127.0.0.1:18080 # Returns Amazon
&lt;span class="ln">3&lt;/span>curl -H &amp;#34;somethingweird.com&amp;#34; http://127.0.0.1:18080 # Returns 404 Backend not found
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Before someone complains that I&amp;rsquo;m not checking if Host is null, this is intentional. If you call our Nginx without the host header the user will receive a 500 as the Host field does not exists and we still try to convert it to lowercase. It&amp;rsquo;s good to know that only that Javascript VM dies, but still in prod scripts this needs to be checked properly!&lt;/p>
&lt;h1 id="going-far-and-reading-the-upstreams-config-from-somewhere-else">Going far and reading the upstreams config from somewhere else&lt;/h1>
&lt;p>Until now we could play with NJS and have some dynamic responses based on headers. But so far, everything is still pretty &amp;ldquo;static&amp;rdquo;, as the decision making is hardcoded into our Javascript.&lt;/p>
&lt;p>But how to do something near to the real world, with dynamic reconfigurations? In case of Ingress NGINX, Lua script is a long running program that listens on a specific port and gets configuration updates from Ingress Controller, adding the endpoints into a local map.&lt;/p>
&lt;p>In NJS, as each script runs and dies per request it does not seem possible to store a cache/map to be used with endpoints, so what&amp;rsquo;s the easiest way? Files containing endpoints :)&lt;/p>
&lt;p>I will not dive here into performance implications, but only on the viability of this. For this solution we want to follow the current approach of Ingress NGINX:&lt;/p>
&lt;ul>
&lt;li>&amp;ldquo;set&amp;rdquo; a variable called &amp;ldquo;proxy_upstream_name&amp;rdquo; containing a &amp;ldquo;namespace-servicename-port&amp;rdquo;&lt;/li>
&lt;li>have a file in a directory called &amp;ldquo;upstreams/namespace-servicename-port&amp;rdquo; containing one upstream per line&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="ln">1&lt;/span>www.google.com:80
&lt;span class="ln">2&lt;/span>www.amazon.com:443
&lt;span class="ln">3&lt;/span>192.168.0.10:9999
&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>For each request, we get the variable name from the request, open the correct file (if it exists), select one random upstream.&lt;/li>
&lt;/ul>
&lt;p>Obs.: Ingress NGINX nowadays reloads the config if backend protocol or locations are changed. We won&amp;rsquo;t mess with this in this article, but this might be an improvement when using NJS: We can put all of the other configurations as dynamic files, and simply read from them.&lt;/p>
&lt;p>So here is the implementation:&lt;/p>
&lt;ul>
&lt;li>etc/nginx.conf
etc/nginx.conf&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="ln"> 1&lt;/span>load_module modules/ngx_http_js_module.so;
&lt;span class="ln"> 2&lt;/span>events {}
&lt;span class="ln"> 3&lt;/span>http {
&lt;span class="ln"> 4&lt;/span> resolver 8.8.8.8;
&lt;span class="ln"> 5&lt;/span> js_import /etc/nginx/njs/ingress.js;
&lt;span class="ln"> 6&lt;/span> js_set $upstream ingress.getUpstream;
&lt;span class="ln"> 7&lt;/span> server {
&lt;span class="ln"> 8&lt;/span> listen 80;
&lt;span class="ln"> 9&lt;/span> location / {
&lt;span class="ln">10&lt;/span> set $ingress_service &amp;#34;default-nginx1-80&amp;#34;;
&lt;span class="ln">11&lt;/span> proxy_pass http://$upstream;
&lt;span class="ln">12&lt;/span> }
&lt;span class="ln">13&lt;/span> location /otherlocation {
&lt;span class="ln">14&lt;/span> set $ingress_service &amp;#34;rkatz-nginx2-80&amp;#34;;
&lt;span class="ln">15&lt;/span> proxy_pass http://$upstream;
&lt;span class="ln">16&lt;/span> }
&lt;span class="ln">17&lt;/span> location /otherlocation1 {
&lt;span class="ln">18&lt;/span> proxy_pass http://$upstream;
&lt;span class="ln">19&lt;/span> }
&lt;span class="ln">20&lt;/span> }
&lt;span class="ln">21&lt;/span>}
&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>njs/ingress.js&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="ln"> 1&lt;/span>&lt;span class="kd">function&lt;/span> &lt;span class="nx">getUpstream&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">req&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln"> 2&lt;/span> &lt;span class="kd">var&lt;/span> &lt;span class="nx">fs&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">require&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;fs&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln"> 3&lt;/span> &lt;span class="kd">var&lt;/span> &lt;span class="nx">upstreamfile&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln"> 4&lt;/span> &lt;span class="kd">var&lt;/span> &lt;span class="nx">upstream&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln"> 5&lt;/span> &lt;span class="kd">var&lt;/span> &lt;span class="nx">service&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln"> 6&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;variables&amp;#34;&lt;/span> &lt;span class="k">in&lt;/span> &lt;span class="nx">req&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln"> 7&lt;/span> &lt;span class="nx">service&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">req&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">variables&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">ingress_service&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln"> 8&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">service&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="s2">&amp;#34;&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln"> 9&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="nx">invalidBackend&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">req&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">404&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="ln">10&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="ln">11&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="ln">12&lt;/span>
&lt;span class="ln">13&lt;/span> &lt;span class="nx">upstreamfile&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;/etc/nginx/upstreams/&amp;#34;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="nx">service&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln">14&lt;/span> &lt;span class="k">try&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln">15&lt;/span> &lt;span class="nx">upstream&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">fs&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">readFileSync&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">upstreamfile&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;utf8&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="ln">16&lt;/span> &lt;span class="kd">var&lt;/span> &lt;span class="nx">endpointArr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">upstream&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">split&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;\n&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="ln">17&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">endpointArr&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">length&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln">18&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">endpointArr&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="s2">&amp;#34;&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln">19&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="nx">endpointArr&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="nx">replace&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sr">/^\s+|\s+$/g&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="ln">20&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="ln">21&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="nx">invalidBackend&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">req&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">404&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="ln">22&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="ln">23&lt;/span> &lt;span class="kd">var&lt;/span> &lt;span class="nx">randomBackend&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">Math&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">floor&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">Math&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">random&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">endpointArr&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">length&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">));&lt;/span>
&lt;span class="ln">24&lt;/span> &lt;span class="c1">// The final replace is to remove some dirty line break
&lt;/span>&lt;span class="ln">25&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="nx">endpointArr&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">randomBackend&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="nx">replace&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sr">/^\s+|\s+$/g&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="ln">26&lt;/span>
&lt;span class="ln">27&lt;/span> &lt;span class="p">}&lt;/span> &lt;span class="k">catch&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">e&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln">28&lt;/span> &lt;span class="nx">req&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">error&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">e&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">29&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="nx">invalidBackend&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">req&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">502&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="ln">30&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="ln">31&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="nx">invalidBackend&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">req&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">503&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="ln">32&lt;/span>&lt;span class="p">}&lt;/span>
&lt;span class="ln">33&lt;/span>
&lt;span class="ln">34&lt;/span>&lt;span class="kd">function&lt;/span> &lt;span class="nx">invalidBackend&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">req&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">code&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln">35&lt;/span> &lt;span class="nx">req&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="k">return&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">code&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;Invalid Backend&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="ln">36&lt;/span> &lt;span class="nx">req&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">finish&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="ln">37&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="s2">&amp;#34;@invalidbackend&amp;#34;&lt;/span>
&lt;span class="ln">38&lt;/span>&lt;span class="p">}&lt;/span>
&lt;span class="ln">39&lt;/span>
&lt;span class="ln">40&lt;/span>&lt;span class="kr">export&lt;/span> &lt;span class="k">default&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="nx">getUpstream&lt;/span>&lt;span class="p">};&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>This is getting more complex, but pretty easy to read: &amp;ldquo;we will use the variable &lt;code>ingress_service&lt;/code> that is set in nginx.conf, to discover what file should be read. So, if &lt;code>ingress_service=rkatz-myapp-80&lt;/code> a file with this name must exist in &lt;code>/etc/nginx/upstreams&lt;/code>.&lt;/p>
&lt;p>And here are the upstream data:&lt;/p>
&lt;ul>
&lt;li>rkatz-nginx2-80&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="ln">1&lt;/span>www.google.com
&lt;span class="ln">2&lt;/span>www.amazon.com
&lt;span class="ln">3&lt;/span>www.uol.com.br
&lt;span class="ln">4&lt;/span>192.168.0.10
&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>default-nginx1-80&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="ln">1&lt;/span>www.rkatz.xyz
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Now calling myserver:80/ will proxy to &lt;a href="http://www.rkatz.xyz">www.rkatz.xyz&lt;/a>, while calling myserver:80/otherlocation will randomize calls between the endpoints in file &lt;code>rkatz-nginx2-80&lt;/code>.&lt;/p>
&lt;p>If I call myserver:80/otherlocation1, I will end up with an error of &lt;code>Invalid backend&lt;/code> as no &lt;code>ingress_service&lt;/code> variable is being set for that location.&lt;/p>
&lt;p>Oh, and if we change the content of the files, it can dinamically point to different backends. No need to restart stuff :)&lt;/p>
&lt;h1 id="some-conclusions">Some conclusions&lt;/h1>
&lt;p>NJS have a lot of potential to offload some dynamic reconfiguration needs in Ingress NGINX and other services.&lt;/p>
&lt;p>While it still have some concerns about the community, the features are pretty nice and easy to develop, using common javascript and can also be used to implement some &amp;ldquo;FaaS&amp;rdquo; on the edge, for example.&lt;/p></description></item><item><title>Using Falco to monitor outbound traffic for Pods in Kubernetes</title><link>https://www.rkatz.xyz/post/2021-04-16-falco-network-monitoring/</link><pubDate>Fri, 16 Apr 2021 16:32:27 -0300</pubDate><guid>https://www.rkatz.xyz/post/2021-04-16-falco-network-monitoring/</guid><description>
&lt;h1 id="using-falco-to-monitor-outbound-traffic-for-pods-in-kubernetes">Using Falco to monitor outbound traffic for Pods in Kubernetes&lt;/h1>
&lt;p>&lt;a href="https://www.falco.org">Falco&lt;/a> is an opensource project from &lt;a href="https://sysdig.com/">Sysdig&lt;/a> focused on container runtime and cloud native security, that uses modern technologies like &lt;a href="https://ebpf.io">eBPF&lt;/a> to monitor environment situations using &lt;a href="https://man7.org/linux/man-pages/man2/syscalls.2.html">syscalls&lt;/a> and other &lt;a href="https://falco.org/docs/event-sources/">events sources&lt;/a>&lt;/p>
&lt;p>We&amp;rsquo;ve used Falco some time ago as a PoC to monitor some specific events, and recently I&amp;rsquo;ve started to mess with it a bit to help contributing on it as a request from the amazing &lt;a href="https://twitter.com/danpopnyc/">Dan Pop&lt;/a> and also to understand better how Falco could help me in future situations.&lt;/p>
&lt;h2 id="the-problem-i-needed-to-solve">The problem I needed to solve&lt;/h2>
&lt;p>Who uses Kubernetes knows how hard is to keep track of networking connections originated from Pods. Even using &lt;a href="https://kubernetes.io/docs/concepts/services-networking/network-policies/">Network Policies&lt;/a>, it&amp;rsquo;s hard to assess which Pod tried to open a connection to internal or external world.&lt;/p>
&lt;p>Having this kind of information is essential in environments with a higher restriction level, or even if you need to legally answer &amp;ldquo;who was connecting to this network endpoint&amp;rdquo;.&lt;/p>
&lt;p>Some CNI providers have specific solutions, like &lt;a href="https://antrea.io">Antrea&lt;/a> exporting via &lt;a href="https://antrea.io/docs/v1.0.0/network-flow-visibility/">Netflow&lt;/a>, or &lt;a href="https://cilium.io/">Cilium&lt;/a> with a short retention solution and visualization with project &lt;a href="https://github.com/cilium/hubble">Hubble&lt;/a>.&lt;/p>
&lt;p>But I wanted something more: I wanted a solution that could be applied with any CNI, even if it does not support Network Policy. I don&amp;rsquo;t care if the connection was dropped or not, I wanted to know how to monitor every connection attempt my Pods does. And this can be monitored, as every connection generates a syscall.&lt;/p>
&lt;h2 id="the-final-result">The final result&lt;/h2>
&lt;p>&lt;img src="https://www.rkatz.xyz/images/falcomonitoring/grafana.png" alt="Final result">&lt;/p>
&lt;h2 id="let-me-introduce-you-falco">Let me introduce you Falco!&lt;/h2>
&lt;p>As I&amp;rsquo;ve explained before, Falco is an opensource project that monitors events in servers. Those events can be syscalls from containers, or even Kubernetes audit events.&lt;/p>
&lt;p>Falco is based in &lt;a href="https://falco.org/docs/rules/">rules&lt;/a>. Those rules mainly define:&lt;/p>
&lt;ul>
&lt;li>a common &lt;strong>name&lt;/strong> (&lt;code>rule&lt;/code>) - &amp;ldquo;Unauthorized SSH access&amp;rdquo;&lt;/li>
&lt;li>a &lt;strong>description&lt;/strong> (&lt;code>desc&lt;/code>) - &amp;ldquo;Some user attempted to login in an SSH service&amp;rdquo;&lt;/li>
&lt;li>a &lt;strong>priority&lt;/strong> (&lt;code>priority&lt;/code>) - &amp;ldquo;WARNING&amp;rdquo;&lt;/li>
&lt;li>a &lt;strong>detailed output&lt;/strong> from the event (&lt;code>output&lt;/code>) - &amp;ldquo;Server &amp;lsquo;homer&amp;rsquo; received a connectin in port 22 from the non authorized IP 192.168.0.123&amp;rdquo;&lt;/li>
&lt;li>a &lt;strong>condition&lt;/strong> (&lt;code>cond&lt;/code>) - &amp;ldquo;(Server has the word &amp;lsquo;restricted&amp;rsquo; in the hostname, and receives a connection in port 22 from a source that is not network 10.10.10.0/24) OR (server received a connection in port 22 mas the process that received this connection is not called &amp;lsquo;sshd&amp;rsquo;)&lt;/li>
&lt;/ul>
&lt;p>Here, I need to point something: I wrote the condition field above in a really simple form, as a common language. Besides Falco rules not being written exactly in this form (as we will see below), it&amp;rsquo;s a really similar format, making it easier to read the rules.&lt;/p>
&lt;p>The rules can also contain other fields not explained here, like exceptions, aditional tags, and also &lt;strong>lists&lt;/strong> and &lt;strong>macros&lt;/strong> that turns repetition of strings easier.&lt;/p>
&lt;h2 id="installing-falco">Installing Falco&lt;/h2>
&lt;p>Before we begin to install Falco, a brief description of my environment:&lt;/p>
&lt;ul>
&lt;li>3 virtual servers with &lt;a href="https://kinvolk.io/flatcar-container-linux/">Flatcar Linux&lt;/a> 2765.2.2, because I LOVE FLATCAR MODEL!! (and also it has an up to date Kernel, which allows me to use Falco eBPF driver). If you want to learn how to install Flatcar in 5 minutes using VMware Player, there&amp;rsquo;s a blog post &lt;a href="https://www.rkatz.xyz/post/2020-09-13-flatcar/">here&lt;/a> explaining how.&lt;/li>
&lt;li>My physical networking is &lt;code>192.168.0.0/24&lt;/code>&lt;/li>
&lt;li>My Kubernetes install is v1.21.0 via Kubeadm. Pods are creted in network &lt;code>172.16.0.0/16&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>To install Falco on Kubernetes using &lt;a href="http://helm.sh">helm&lt;/a>, basically you need to follow 4 steps:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>kubectl create ns falco
&lt;span class="ln">2&lt;/span>helm repo add falcosecurity https://falcosecurity.github.io/charts
&lt;span class="ln">3&lt;/span>helm repo update
&lt;span class="ln">4&lt;/span>helm install falco falcosecurity/falco --namespace falco --set falcosidekick.enabled&lt;span class="o">=&lt;/span>&lt;span class="nb">true&lt;/span> --set falcosidekick.webui.enabled&lt;span class="o">=&lt;/span>&lt;span class="nb">true&lt;/span> --set ebpf.enabled&lt;span class="o">=&lt;/span>&lt;span class="nb">true&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>After that, you just need to verify if all Pods in namespace &lt;code>falco&lt;/code> are running, with &lt;code>kubectl get pods -n falco&lt;/code>&lt;/p>
&lt;p>With this install, I&amp;rsquo;ve also enabled &lt;a href="https://github.com/falcosecurity/falcosidekick">sidekick&lt;/a> which is a really cool project that exports Falco events to a bunch of outputs, and also allows you to visualize them in its own interface&lt;/p>
&lt;h2 id="creating-and-visualizing-alerts">Creating and visualizing alerts&lt;/h2>
&lt;p>Falco has some default rules. As an example, as soon as it is executing, if you issue a &lt;code>kubectl exec -it&lt;/code> to a Pod, it will generate some alert:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="ln">1&lt;/span>kubectl &lt;span class="nb">exec&lt;/span> -it -n testkatz nginx-6799fc88d8-996gz -- /bin/bash
&lt;span class="ln">2&lt;/span>root@nginx-6799fc88d8-996gz:/#
&lt;/code>&lt;/pre>&lt;/div>&lt;p>And in Falco logs (I&amp;rsquo;ve made this JSON clearer, but it&amp;rsquo;s a one liner)&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-json" data-lang="json">&lt;span class="ln"> 1&lt;/span>&lt;span class="p">{&lt;/span>
&lt;span class="ln"> 2&lt;/span> &lt;span class="nt">&amp;#34;output&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="s2">&amp;#34;14:23:15.139384666: Notice A shell was spawned in a container with an attached terminal (user=root user_loginuid=-1 k8s.ns=testkatz k8s.pod=nginx-6799fc88d8-996gz container=3db00b476ee2 shell=bash parent=runc cmdline=bash terminal=34816 container_id=3db00b476ee2 image=nginx) k8s.ns=testkatz k8s.pod=nginx-6799fc88d8-996gz container=3db00b476ee2&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln"> 3&lt;/span> &lt;span class="nt">&amp;#34;priority&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="s2">&amp;#34;Notice&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln"> 4&lt;/span> &lt;span class="nt">&amp;#34;rule&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="s2">&amp;#34;Terminal shell in container&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln"> 5&lt;/span> &lt;span class="nt">&amp;#34;time&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="s2">&amp;#34;2021-04-16T14:23:15.139384666Z&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln"> 6&lt;/span> &lt;span class="nt">&amp;#34;output_fields&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln"> 7&lt;/span> &lt;span class="nt">&amp;#34;container.id&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="s2">&amp;#34;3db00b476ee2&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln"> 8&lt;/span> &lt;span class="nt">&amp;#34;container.image.repository&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="s2">&amp;#34;nginx&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln"> 9&lt;/span> &lt;span class="nt">&amp;#34;evt.time&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">1618582995139384666&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln">10&lt;/span> &lt;span class="nt">&amp;#34;k8s.ns.name&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="s2">&amp;#34;testkatz&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln">11&lt;/span> &lt;span class="nt">&amp;#34;k8s.pod.name&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="s2">&amp;#34;nginx-6799fc88d8-996gz&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln">12&lt;/span> &lt;span class="nt">&amp;#34;proc.cmdline&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="s2">&amp;#34;bash&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln">13&lt;/span> &lt;span class="nt">&amp;#34;proc.name&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="s2">&amp;#34;bash&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln">14&lt;/span> &lt;span class="nt">&amp;#34;proc.pname&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="s2">&amp;#34;runc&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln">15&lt;/span> &lt;span class="nt">&amp;#34;proc.tty&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">34816&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln">16&lt;/span> &lt;span class="nt">&amp;#34;user.loginuid&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">-1&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln">17&lt;/span> &lt;span class="nt">&amp;#34;user.name&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="s2">&amp;#34;root&amp;#34;&lt;/span>
&lt;span class="ln">18&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="ln">19&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>In this log you can check that besides the output message, some additional fields are mapped, like the process name, the namespace and the pod name. We will explore this further.&lt;/p>
&lt;h2 id="creating-rules-for-falco">Creating rules for Falco&lt;/h2>
&lt;p>Falco can monitor syscalls. A syscall of a network connection is of the &amp;lsquo;connect&amp;rsquo; type, and this way, we can create a basic rule so Falco can always generate a notification when some container tries to connect to the outside world.&lt;/p>
&lt;p>Falco already comes with a pre defined list and macro for outbound connections:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="ln"> 1&lt;/span>&lt;span class="c"># RFC1918 addresses were assigned for private network usage&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln"> 2&lt;/span>&lt;span class="w">&lt;/span>- &lt;span class="nt">list&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">rfc_1918_addresses&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln"> 3&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">items&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s1">&amp;#39;&amp;#34;10.0.0.0/8&amp;#34;&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;&amp;#34;172.16.0.0/12&amp;#34;&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;&amp;#34;192.168.0.0/16&amp;#34;&amp;#39;&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln"> 4&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln"> 5&lt;/span>&lt;span class="w">&lt;/span>- &lt;span class="nt">macro&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">outbound&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln"> 6&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">condition&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">&amp;gt;&lt;/span>&lt;span class="sd">
&lt;/span>&lt;span class="ln"> 7&lt;/span>&lt;span class="sd"> (((evt.type = connect and evt.dir=&amp;lt;) or
&lt;/span>&lt;span class="ln"> 8&lt;/span>&lt;span class="sd"> (evt.type in (sendto,sendmsg) and evt.dir=&amp;lt; and
&lt;/span>&lt;span class="ln"> 9&lt;/span>&lt;span class="sd"> fd.l4proto != tcp and fd.connected=false and fd.name_changed=true)) and
&lt;/span>&lt;span class="ln">10&lt;/span>&lt;span class="sd"> (fd.typechar = 4 or fd.typechar = 6) and
&lt;/span>&lt;span class="ln">11&lt;/span>&lt;span class="sd"> (fd.ip != &amp;#34;0.0.0.0&amp;#34; and fd.net != &amp;#34;127.0.0.0/8&amp;#34; and not fd.snet in (rfc_1918_addresses)) and
&lt;/span>&lt;span class="ln">12&lt;/span>&lt;span class="sd"> (evt.rawres &amp;gt;= 0 or evt.res = EINPROGRESS))&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This macro:&lt;/p>
&lt;ul>
&lt;li>Verifies if the event is of type connect (network connection) and it&amp;rsquo;s outbound (&lt;code>evt.dir=&amp;lt;&lt;/code>)&lt;/li>
&lt;li>OR if this is a sendto or sendmsg type going outbound, which protocol is not TCP and the file descriptor is not connected, and the name does not change, tipically an UDP connection.&lt;/li>
&lt;li>If any of the conditions above are true AND the file descriptor is 4 or 6, which represents IPv4 or IPv6&lt;/li>
&lt;li>AND the IP is not equal to 0.0.0.0 AND the network is not equal to 127.0.0.0/8 (localhost) AND the destination network (&lt;code>fd.snet&lt;/code>) is not in list &lt;code>rfc_1918_addresses&lt;/code>&lt;/li>
&lt;li>AND the return from the event is bigger than 0 OR is INPROGRESS&lt;/li>
&lt;/ul>
&lt;p>If you put this expression in vscode, you can work through the openning and closure of parenthisis. All existing fields are really well explained in &lt;a href="https://falco.org/docs/rules/supported-fields">supported fields&lt;/a>&lt;/p>
&lt;p>But the above macro does not fits our needs, as it ignores the outbound connections to internal networks (rfc1918), which is the majority of enterprise cases. Let&amp;rsquo;s define then our own macro and rule:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="ln"> 1&lt;/span>- &lt;span class="nt">macro&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">outbound_corp&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln"> 2&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">condition&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">&amp;gt;&lt;/span>&lt;span class="sd">
&lt;/span>&lt;span class="ln"> 3&lt;/span>&lt;span class="sd"> (((evt.type = connect and evt.dir=&amp;lt;) or
&lt;/span>&lt;span class="ln"> 4&lt;/span>&lt;span class="sd"> (evt.type in (sendto,sendmsg) and evt.dir=&amp;lt; and
&lt;/span>&lt;span class="ln"> 5&lt;/span>&lt;span class="sd"> fd.l4proto != tcp and fd.connected=false and fd.name_changed=true)) and
&lt;/span>&lt;span class="ln"> 6&lt;/span>&lt;span class="sd"> (fd.typechar = 4 or fd.typechar = 6) and
&lt;/span>&lt;span class="ln"> 7&lt;/span>&lt;span class="sd"> (fd.ip != &amp;#34;0.0.0.0&amp;#34; and fd.net != &amp;#34;127.0.0.0/8&amp;#34;) and
&lt;/span>&lt;span class="ln"> 8&lt;/span>&lt;span class="sd"> (evt.rawres &amp;gt;= 0 or evt.res = EINPROGRESS))&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln"> 9&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln">10&lt;/span>&lt;span class="w">&lt;/span>- &lt;span class="nt">list&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">k8s_not_monitored&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln">11&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">items&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s1">&amp;#39;&amp;#34;green&amp;#34;&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;&amp;#34;blue&amp;#34;&amp;#39;&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln">12&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln">13&lt;/span>&lt;span class="w">&lt;/span>- &lt;span class="nt">rule&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">kubernetes outbound connection&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln">14&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">desc&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">A pod in namespace attempted to connect to the outer world&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln">15&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">condition&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">outbound_corp and k8s.ns.name != &amp;#34;&amp;#34; and not k8s.ns.label.network in (k8s_not_monitored)&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln">16&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">output&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;Outbound network traffic connection from a Pod: (pod=%k8s.pod.name namespace=%k8s.ns.name srcip=%fd.cip dstip=%fd.sip dstport=%fd.sport proto=%fd.l4proto procname=%proc.name)&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln">17&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">priority&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">WARNING&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The rule above:&lt;/p>
&lt;ul>
&lt;li>Creates a macro &lt;code>outbound_corp&lt;/code> that deals with any outbound connection&lt;/li>
&lt;li>Creates a list &lt;code>k8s_not_monitored&lt;/code> with values &lt;code>blue&lt;/code> and &lt;code>green&lt;/code>&lt;/li>
&lt;li>Creates a rule that verifies:
&lt;ul>
&lt;li>If it&amp;rsquo;s an outbound traffic defined in macro &lt;code>outbound_corp&lt;/code>&lt;/li>
&lt;li>AND If the field k8s.ns.name is defined (which means it&amp;rsquo;s being executed inside Kubernetes)&lt;/li>
&lt;li>And if the namespace containing the Pod does not have a label &lt;code>network&lt;/code> containing any of the values in list &lt;code>k8s_not_monitored&lt;/code>. If it does, the traffic wont be monitored&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>When this rule is triggered, the following output might be seen:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="ln">1&lt;/span>Outbound network traffic connection from a Pod: (pod=nginx namespace=testkatz srcip=172.16.204.12 dstip=192.168.0.1 dstport=80 proto=tcp procname=curl)
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="applying-the-rules">Applying the rules&lt;/h2>
&lt;p>Helm chart allows us to install &lt;a href="https://github.com/falcosecurity/charts/tree/master/falco#loading-custom-rules">custom rules&lt;/a> without much effort.&lt;/p>
&lt;p>To do so, we need to pick the rules above and put inside a &lt;code>customRules&lt;/code> structure, before &amp;lsquo;upgrading&amp;rsquo; the installation:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="ln"> 1&lt;/span>&lt;span class="nt">customRules&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln"> 2&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">rules-networking.yaml&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">|-&lt;/span>&lt;span class="sd">
&lt;/span>&lt;span class="ln"> 3&lt;/span>&lt;span class="sd"> - macro: outbound_corp
&lt;/span>&lt;span class="ln"> 4&lt;/span>&lt;span class="sd"> condition: &amp;gt;
&lt;/span>&lt;span class="ln"> 5&lt;/span>&lt;span class="sd"> (((evt.type = connect and evt.dir=&amp;lt;) or
&lt;/span>&lt;span class="ln"> 6&lt;/span>&lt;span class="sd"> (evt.type in (sendto,sendmsg) and evt.dir=&amp;lt; and
&lt;/span>&lt;span class="ln"> 7&lt;/span>&lt;span class="sd"> fd.l4proto != tcp and fd.connected=false and fd.name_changed=true)) and
&lt;/span>&lt;span class="ln"> 8&lt;/span>&lt;span class="sd"> (fd.typechar = 4 or fd.typechar = 6) and
&lt;/span>&lt;span class="ln"> 9&lt;/span>&lt;span class="sd"> (fd.ip != &amp;#34;0.0.0.0&amp;#34; and fd.net != &amp;#34;127.0.0.0/8&amp;#34;) and
&lt;/span>&lt;span class="ln">10&lt;/span>&lt;span class="sd"> (evt.rawres &amp;gt;= 0 or evt.res = EINPROGRESS))
&lt;/span>&lt;span class="ln">11&lt;/span>&lt;span class="sd"> - list: k8s_not_monitored
&lt;/span>&lt;span class="ln">12&lt;/span>&lt;span class="sd"> items: [&amp;#39;&amp;#34;green&amp;#34;&amp;#39;, &amp;#39;&amp;#34;blue&amp;#34;&amp;#39;]
&lt;/span>&lt;span class="ln">13&lt;/span>&lt;span class="sd"> - rule: kubernetes outbound connection
&lt;/span>&lt;span class="ln">14&lt;/span>&lt;span class="sd"> desc: A pod in namespace attempted to connect to the outer world
&lt;/span>&lt;span class="ln">15&lt;/span>&lt;span class="sd"> condition: outbound_corp and k8s.ns.name != &amp;#34;&amp;#34; and not k8s.ns.label.network in (k8s_not_monitored)
&lt;/span>&lt;span class="ln">16&lt;/span>&lt;span class="sd"> output: &amp;#34;Outbound network traffic connection from a Pod: (pod=%k8s.pod.name namespace=%k8s.ns.name srcip=%fd.cip dstip=%fd.sip dstport=%fd.sport proto=%fd.l4proto procname=%proc.name)&amp;#34;
&lt;/span>&lt;span class="ln">17&lt;/span>&lt;span class="sd"> priority: WARNING&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>It&amp;rsquo;s the same rule as above, but inside a &lt;code>customRules.rules-networking.yaml&lt;/code> field.&lt;/p>
&lt;p>After that we just need to update Falco installation, with the following:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="ln">1&lt;/span>helm upgrade falco falcosecurity/falco --namespace falco --set falcosidekick.enabled=true --set falcosidekick.webui.enabled=true --set ebpf.enabled=true -f custom-rules.yaml
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Falco Pods will be restarted. If the Pod enters in an &lt;code>Error&lt;/code> state, take a look into their logs to see if there&amp;rsquo;s some failure on rules (yaml = space problems!)&lt;/p>
&lt;h2 id="show-me-the-logs">Show me the logs!!!&lt;/h2>
&lt;p>Executing &lt;code>kubectl logs -n falco -l app=falco&lt;/code> we will see our outbound connection logs appearing:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-json" data-lang="json">&lt;span class="ln"> 1&lt;/span>&lt;span class="p">{&lt;/span>
&lt;span class="ln"> 2&lt;/span> &lt;span class="nt">&amp;#34;output&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="s2">&amp;#34;18:05:13.045457220: Warning Outbound network traffic connection from a Pod: (pod=falco-l8xmm namespace=falco srcip=192.168.0.150 dstip=192.168.0.11 dstport=2801 proto=tcp procname=falco) k8s.ns=falco k8s.pod=falco-l8xmm container=cb86ca8afdaa&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln"> 3&lt;/span> &lt;span class="nt">&amp;#34;priority&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="s2">&amp;#34;Warning&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln"> 4&lt;/span> &lt;span class="nt">&amp;#34;rule&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="s2">&amp;#34;kubernetes outbound connection&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln"> 5&lt;/span> &lt;span class="nt">&amp;#34;time&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="s2">&amp;#34;2021-04-16T18:05:13.045457220Z&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln"> 6&lt;/span> &lt;span class="nt">&amp;#34;output_fields&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="ln"> 7&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln"> 8&lt;/span> &lt;span class="nt">&amp;#34;container.id&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="s2">&amp;#34;cb86ca8afdaa&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln"> 9&lt;/span> &lt;span class="nt">&amp;#34;evt.time&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">1618596313045457220&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln">10&lt;/span> &lt;span class="nt">&amp;#34;fd.cip&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="s2">&amp;#34;192.168.0.150&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln">11&lt;/span> &lt;span class="nt">&amp;#34;fd.l4proto&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="s2">&amp;#34;tcp&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln">12&lt;/span> &lt;span class="nt">&amp;#34;fd.sip&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="s2">&amp;#34;192.168.0.11&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln">13&lt;/span> &lt;span class="nt">&amp;#34;fd.sport&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">2801&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln">14&lt;/span> &lt;span class="nt">&amp;#34;k8s.ns.name&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="s2">&amp;#34;falco&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln">15&lt;/span> &lt;span class="nt">&amp;#34;k8s.pod.name&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="s2">&amp;#34;falco-l8xmm&amp;#34;&lt;/span>
&lt;span class="ln">16&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="ln">17&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>But those are logs generated by the own Falco containers, and we don&amp;rsquo;t want them. Let&amp;rsquo;s mark this namespace with the label that will make it stop generating the logs from those Pods traffic:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="ln">1&lt;/span>kubectl label ns falco &lt;span class="nv">network&lt;/span>&lt;span class="o">=&lt;/span>green
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Nice! Now that Falco Pods does not enter anymore in monitoring, let&amp;rsquo;s make some tests :D For that, I&amp;rsquo;ve created a namespace called &lt;code>testkatz&lt;/code> with some Pods inside, and then I&amp;rsquo;ve started to generate some outbound traffic:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="ln">1&lt;/span>&amp;#34;output&amp;#34;:&amp;#34;18:11:04.365837060: Warning Outbound network traffic connection from a Pod: (pod=nginx-6799fc88d8-996gz namespace=testkatz srcip=172.16.166.174 dstip=10.96.0.10 dstport=53 proto=udp procname=curl)
&lt;span class="ln">2&lt;/span>=====
&lt;span class="ln">3&lt;/span>&amp;#34;output&amp;#34;:&amp;#34;18:11:04.406290360: Warning Outbound network traffic connection from a Pod: (pod=nginx-6799fc88d8-996gz namespace=testkatz srcip=172.16.166.174 dstip=172.217.30.164 dstport=80 proto=tcp procname=curl)
&lt;/code>&lt;/pre>&lt;/div>&lt;p>In the above log, we can see a call to the DNS, followed by a call to the destination server. We can see also which program inside the container started this traffic.&lt;/p>
&lt;h2 id="a-better-visualization">A better visualization&lt;/h2>
&lt;p>No one deserves to monitor by watching JSON logs streaming on the screen, right? Here comes Falco Sidekick to the rescue. It was installed with Falco, so we only need to configure it to send those &amp;ldquo;alerts&amp;rdquo; to a desired output.&lt;/p>
&lt;p>Sidekick comes with a web interface, that can be accesses with a port-forward, as example:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="ln">1&lt;/span>kubectl port-forward -n falco pod/falco-falcosidekick-ui-764f5f469f-njppj 2802
&lt;/code>&lt;/pre>&lt;/div>&lt;p>After that, you only need to access with your browser [http://localhost:2802/ui] and you will have something as cool as:&lt;/p>
&lt;p>&lt;img src="https://www.rkatz.xyz/images/falcomonitoring/sidekick1.png" alt="Sidekick Dashboard">&lt;/p>
&lt;p>&lt;img src="https://www.rkatz.xyz/images/falcomonitoring/sidekick2.png" alt="Sidekick Events">&lt;/p>
&lt;p>But I want to send this to a place where I can retain this, as some install of Grafana Loki. You can use the Grafana Cloud Freetier for this example, but do not use this in production if you have a lot of logs :)&lt;/p>
&lt;p>After generating a user and apikey in Grafana Cloud, you can update your Falco sidekick install with the following command (thanks Thomas Labarussias for the idea!):&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="ln">1&lt;/span>helm upgrade falco falcosecurity/falco --namespace falco --set falcosidekick.enabled=true --set falcosidekick.webui.enabled=true --set ebpf.enabled=true --set falcosidekick.config.loki.hostport=https://USER:APIKEY@logs-prod-us-central1.grafana.net -f custom-rules.yaml
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Restart sidekick with &lt;code>kubectl delete pods -n falco -l app.kubernetes.io/name=falcosidekick&lt;/code> and you should see messages like &lt;code>[INFO] : Loki - Post OK (204)&lt;/code> in sidekick log each time a new alert is triggered.&lt;/p>
&lt;p>With that, you may have a dashboard in Grafana Cloud as I shown you on the beginning of this article :)&lt;/p>
&lt;p>&lt;a href="https://gist.github.com/rikatz/d53751acf9b705262db992b3bd98acbe#file-dashboard-json">Here&lt;/a> is my dashboard example, but remember to change your Loki datastore, and also if you have improved this dashboard please post its config and a picture to make me happy!&lt;/p></description></item><item><title>Kubernetes Control Plane natively on FreeBSD with K3s</title><link>https://www.rkatz.xyz/post/2020-12-30-k8s-control-plane-fbsd-k3s/</link><pubDate>Wed, 30 Dec 2020 17:55:19 -0300</pubDate><guid>https://www.rkatz.xyz/post/2020-12-30-k8s-control-plane-fbsd-k3s/</guid><description>
&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>I&amp;rsquo;ve been trying, on the past few days make Kubernetes usable on FreeBSD. Why? Some would say I like to suffer. Others would say I have much spare time.&lt;/p>
&lt;p>To be honest, I&amp;rsquo;m doing this for fun. &lt;a href="https://www.freebsd.org">FreeBSD&lt;/a>, for me, is one of the most stable and performant Operating Systems, and it&amp;rsquo;s sad that we cannot
use it to run Kubernetes components (yet).&lt;/p>
&lt;p>In a near future, me and &lt;a href="https://twitter.com/fuzzykb">Karen Bruner&lt;/a> are planning to make not only the control plane usable, but also to use one of the precedents of containers on
modern operating systems, even before Docker: &lt;a href="https://www.freebsd.org/doc/handbook/jails.html">Jails&lt;/a> as a &amp;ldquo;container runtime&amp;rdquo;.&lt;/p>
&lt;p>I&amp;rsquo;m also using &lt;a href="https://k3s.io/">k3s&lt;/a> because I became too lazy to configure Kubernetes the hard way :P So bootstrapping an etcd, then the components was too much (for now)
just to have some fun. But maybe some day, will do.&lt;/p>
&lt;p>&lt;strong>Spoiler alert&lt;/strong>: All the main components of Kubernetes can be compiled for FreeBSD. An exception, right now is just &lt;a href="https://kubernetes.io/docs/reference/command-line-tools-reference/kubelet/">kubelet&lt;/a>
that have, in a method a wrong syscall to fetch the node boottime, but a &lt;a href="https://github.com/kubernetes/kubernetes/pull/97270">PR&lt;/a> was created to correct that.&lt;/p>
&lt;h2 id="removing-code-before-compiling">Removing code before compiling&lt;/h2>
&lt;p>So K3s is a AIO (all in one) binary that runs all the components necessary to make Kubernetes works. You can use Alex Ellis &lt;a href="https://github.com/alexellis/k3sup">k3sup&lt;/a>
to bootstrap a Kubernetes cluster really, really fast.&lt;/p>
&lt;p>Karen has also shown &lt;a href="https://productionwithscissors.run/2020/12/26/adventures-in-freebernetes-tutorial-build-your-own-bare-vm-k3s-cluster/">how to do this with FreeBSD&lt;/a> as a virtualization host + Linux machines running over bhyve (It&amp;rsquo;s a FreeBSD + bhyve + Linux + k3sup) and you should really check this!&lt;/p>
&lt;p>But going back to the main subject: k3s does not natively compile for FreeBSD. And why this happens? Because it needs some components that can only be compiled on Linux (or Windows) to work.&lt;/p>
&lt;p>As an example, it embeds &lt;a href="https://kubernetes.io/docs/reference/command-line-tools-reference/kube-proxy/">kube-proxy&lt;/a>. But, kube-proxy needs &lt;a href="https://en.wikipedia.org/wiki/Iptabl">iptables&lt;/a> and ipvs(&lt;a href="https://en.wikipedia.org/wiki/IP_Virtual_Server">https://en.wikipedia.org/wiki/IP_Virtual_Server&lt;/a>) to compile, which are Linux native technologies, not present on FreeBSD kernel.&lt;/p>
&lt;p>The same happens with &lt;a href="https://github.com/coreos/flannel">flannel&lt;/a>, which is embedded in the code and used as the &lt;a href="https://github.com/containernetworking/cni">CNI&lt;/a>.&lt;/p>
&lt;p>Fortunately, all of this code are present on a main package of k3s: &lt;strong>agent&lt;/strong>. But, we don&amp;rsquo;t need agent for our Control Plane, because agent is responsible for behaving like&amp;hellip;AN AGENT for k3s :D&lt;/p>
&lt;p>So, moving on, you can see the necessary modifications to make k3s compile for FreeBSD here: &lt;a href="https://github.com/k3s-io/k3s/compare/v1.20.0+k3s2...rikatz:fbsd-control-plane">https://github.com/k3s-io/k3s/compare/v1.20.0+k3s2...rikatz:fbsd-control-plane&lt;/a>&lt;/p>
&lt;p>Explaining:&lt;/p>
&lt;ul>
&lt;li>There are some files I hadn&amp;rsquo;t changed, but appear as difference because I&amp;rsquo;ve made all the mods from upstream branch&lt;/li>
&lt;li>On the &lt;code>main.go&lt;/code> files (cmd/k3s/main.go and main.go) the call to &amp;ldquo;agent&amp;rdquo; packages is removed. The resulting binary wont have &amp;ldquo;agent&amp;rdquo; subcommand, but only &amp;ldquo;server&amp;rdquo;, &amp;ldquo;kubectl&amp;rdquo;, etc.&lt;/li>
&lt;li>On &lt;code>pkg/cli/server/server.go&lt;/code> all the references for &lt;code>agent&lt;/code> and &lt;code>rootless&lt;/code> are removed. This way, we are not using anything from &lt;code>agent&lt;/code> package that can stop us from compiling!&lt;/li>
&lt;li>On &lt;code>pkg/daemons/executor&lt;/code> interface, all the references for Kubelet and KubeProxy are removed. We&amp;rsquo;re running control plane, and as both of those components does not compile in FreeBSD, let&amp;rsquo;s get rid of them&lt;/li>
&lt;li>On &lt;code>pkg/server/server.go&lt;/code> all the references for rootless/rootlessports are removed, because this package uses some native Linux calls to make rootless works (and we&amp;rsquo;re not running anything as a container anyway!)&lt;/li>
&lt;/ul>
&lt;p>There&amp;rsquo;s one more item to take note: On &lt;a href="https://github.com/rikatz/k3s/blob/fbsd-control-plane/pkg/cli/server/server.go#L47">server.go&lt;/a> k3s uses an artifact to masquerade its process to not expose some credential passed as an argument.&lt;/p>
&lt;p>But the library used (gspt) uses some headers and some sort of CGO, so you can make two choices here:&lt;/p>
&lt;ul>
&lt;li>Remove the mentioned line (and the referenced library) and be aware someone using ps wwwaux can see your credentials&lt;/li>
&lt;li>Keep the line, but compile on a FreeBSD machine (instead of using GOOS=freebsd on a Linux machine). Also, be aware that &lt;strong>WITH THIS OPTION K3S DOES NOT COMPILE FOR RPI3/ARM64&lt;/strong> (or maybe you need a rpi3 and compile there, which is plausible but I didn&amp;rsquo;t tried!)&lt;/li>
&lt;/ul>
&lt;p>One alternative here (and I need to check if this is possible) is to replace this to some syscall.&lt;/p>
&lt;h2 id="compiling">Compiling&lt;/h2>
&lt;p>So now that all the modifications have been explained, compiling is pretty easy:&lt;/p>
&lt;ul>
&lt;li>If you are on a Linux machine (and removed the gspt line mentioned above)&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="ln">1&lt;/span>GOOS=freebsd go build -o k3s main.go
&lt;/code>&lt;/pre>&lt;/div>&lt;p>You can put also a GOARCH=arm64 together with GOOS=freebsd and compile it for RPi3&lt;/p>
&lt;ul>
&lt;li>If you are on a FreeBSD machine:&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="ln">1&lt;/span>go build -o k3s main.go
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Aaaand that&amp;rsquo;s it!&lt;/p>
&lt;h2 id="running">Running&lt;/h2>
&lt;p>Well, so here we got a problem. K3s was built to run as a standalone AIO with embedded database (sqlite), or you can use an external database (postgres, mysql, etcd, etc).&lt;/p>
&lt;p>But, it happens that sqlite is built with CGO, and because we don&amp;rsquo;t have it on FreeBSD the best option FOR ME was: install a default Postgres and make it run.&lt;/p>
&lt;p>Here a side note: I didn&amp;rsquo;t put much effort on trying to make sqlite works, and instead I&amp;rsquo;ve directly jumped to Postgres because it was the easiest path. But, be my guest, and tell me what have you discovered!&lt;/p>
&lt;p>Well, so, to make it run we need:&lt;/p>
&lt;ul>
&lt;li>A Postgres DB&lt;/li>
&lt;li>The generated binary&lt;/li>
&lt;/ul>
&lt;p>Installing Postgres on FreeBSD is really, really simple but yes, you can run this on an external DB running on Linux, in some cloud, etc.&lt;/p>
&lt;p>But let&amp;rsquo;s install this DB. Assuming you have a FreeBSD box working:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="ln">1&lt;/span>pkg update
&lt;span class="ln">2&lt;/span>pkg install postgresql12-server postgresql12-client
&lt;span class="ln">3&lt;/span>sysrc postgresql_enable=yes
&lt;span class="ln">4&lt;/span>/usr/local/etc/rc.d/postgresql initdb
&lt;span class="ln">5&lt;/span>service postgresql start
&lt;/code>&lt;/pre>&lt;/div>&lt;p>And that&amp;rsquo;s it for PostgreSQL. Obviously, this is a VERY INSECURE lab setup! Don&amp;rsquo;t run this (or anything in this tutorial, to be fair) in Production!&lt;/p>
&lt;p>Well, with Postgres up and running, you can run k3s and your control plane will be magically bootstrapped:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="ln">1&lt;/span>./k3s server --datastore-endpoint=postgres://postgres@127.0.0.1?sslmode=disable
&lt;/code>&lt;/pre>&lt;/div>&lt;p>This is going to print a lot of messages in your terminal, and now you have a Kubernetes Control Plane up and running natively on FreeBSD. Nice, right?&lt;/p>
&lt;h2 id="testing">Testing&lt;/h2>
&lt;p>Well, ok, the daemon is running but PROVE ME IT WORKS!&lt;/p>
&lt;p>Okie, so first of all, you need somewhere to run a kubectl. You can run it on FreeBSD (it&amp;rsquo;s easy to compile! I promise!) but I wont go that way right now.&lt;/p>
&lt;p>So, grab the kubeconfig you&amp;rsquo;re going to use on &lt;code>/var/lib/rancher/k3s/server/cred/admin.kubeconfig&lt;/code>, plus the referenced certificates in &lt;code>/var/lib/rancher/k3s/server/tls/client-*&lt;/code> and &lt;code>/var/lib/rancher/k3s/server/tls/server-ca.crt&lt;/code>, and copy them to another machine that kubectl is installed.&lt;/p>
&lt;p>Edit the admin.kubeconfig file, changing:&lt;/p>
&lt;ul>
&lt;li>&lt;code>server: https://127.0.0.1:6444&lt;/code> -&amp;gt; &lt;code>server: https://fbsd-ip:6443&lt;/code>&lt;/li>
&lt;li>&lt;code>certificate-authority&lt;/code>, &lt;code>client-certificate&lt;/code> and &lt;code>client-key&lt;/code> to point to certificates location. If they&amp;rsquo;re on the same directory as admin.kubeconfig, just remove the leading path and leave only the file name&lt;/li>
&lt;/ul>
&lt;p>Great! So now let&amp;rsquo;s check if kubectl can communicate with the server and what it brings to us:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="ln">1&lt;/span>kubectl --kubeconfig=admin.kubeconfig version
&lt;span class="ln">2&lt;/span>Client Version: version.Info{Major:&amp;#34;1&amp;#34;, Minor:&amp;#34;20&amp;#34;, GitVersion:&amp;#34;v1.20.1&amp;#34;, GitCommit:&amp;#34;c4d752765b3bbac2237bf87cf0b1c2e307844666&amp;#34;, GitTreeState:&amp;#34;clean&amp;#34;, BuildDate:&amp;#34;2020-12-18T12:09:25Z&amp;#34;, GoVersion:&amp;#34;go1.15.5&amp;#34;, Compiler:&amp;#34;gc&amp;#34;, Platform:&amp;#34;linux/amd64&amp;#34;}
&lt;span class="ln">3&lt;/span>Server Version: version.Info{Major:&amp;#34;1&amp;#34;, Minor:&amp;#34;20&amp;#34;, GitVersion:&amp;#34;v1.20.0-k3s1&amp;#34;, GitCommit:&amp;#34;3559625e27197f60bcc39c4b3ecffc80bad7785e&amp;#34;, GitTreeState:&amp;#34;clean&amp;#34;, BuildDate:&amp;#34;2020-12-08T20:42:55Z&amp;#34;, GoVersion:&amp;#34;go1.15.6&amp;#34;, Compiler:&amp;#34;gc&amp;#34;, Platform:&amp;#34;freebsd/amd64&amp;#34;}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>So if you take a look above, you&amp;rsquo;ll see that the Server Platform is: &lt;code>&amp;quot;freebsd/amd64&amp;quot;&lt;/code> (I&amp;rsquo;m running as a VM here in my machine!)&lt;/p>
&lt;p>&amp;ldquo;Nah, but this is not enough! I wanna see some Kubernetes Nodes!&amp;rdquo; - Me, talking with myself!&lt;/p>
&lt;p>OK, so let&amp;rsquo;s go. First, you need to install k3s binary on some Linux machine. Go ahead, and grab some &lt;a href="https://github.com/k3s-io/k3s#manual-download">release&lt;/a>&lt;/p>
&lt;p>Nice, so now we need the token to join our agent/node with our Control Plane. It&amp;rsquo;s located on the Control Plane machine, so grab the token with:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="ln">1&lt;/span>cat /var/lib/rancher/k3s/server/token
&lt;/code>&lt;/pre>&lt;/div>&lt;p>With that token copied, go back to your Linux machine that you&amp;rsquo;re going to run your node/agent and run:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="ln">1&lt;/span>sudo k3s agent --server https://fbsd-ip:6443 --token THE-TOKEN-YOU-TOOK-NOTE
&lt;/code>&lt;/pre>&lt;/div>&lt;p>After some time, your node will appear for the Control Plane. You can check this way:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="ln">1&lt;/span>kubectl --kubeconfig=admin.kubeconfig get nodes
&lt;span class="ln">2&lt;/span>NAME STATUS ROLES AGE VERSION
&lt;span class="ln">3&lt;/span>node123 Ready &amp;lt;none&amp;gt; 68m v1.20.0+k3s2
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Go ahead, run some Pods, be happy :D&lt;/p></description></item><item><title>The mix (and mess) of Packet Filter in Linux Part 2 - eBPF + XDP</title><link>https://www.rkatz.xyz/post/2020-11-01-the-mix-of-packet-filter-ebpf-xdp/</link><pubDate>Sun, 01 Nov 2020 22:45:19 -0300</pubDate><guid>https://www.rkatz.xyz/post/2020-11-01-the-mix-of-packet-filter-ebpf-xdp/</guid><description>
&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>In the first part of this article, I’ve shown the most common (so far) methods of doing packet filtering in Linux.&lt;/p>
&lt;p>This part of the article is all dedicated to cover a brief introduction of eBPF and XDP, being used to packet filtering. I’ll not cover the usage of eBPF to monitor resources and performance, but there’s plenty of materials available and I’ll put some at the end of this article.&lt;/p>
&lt;p>&lt;strong>Spoiler alert&lt;/strong>: As I’ve said in the previous article, I’m not a expert of eBPF, but a new learner. So expect mistakes, and provide me feedback! I do appreciate that!&lt;/p>
&lt;h2 id="what-is-ebpf">What is eBPF&lt;/h2>
&lt;p>The simplest definition I’ve seen somewhere is that eBPF is a way to run specific and confined programs within Linux Kernel, but without having to put code into the Kernel tree or developing modules.&lt;/p>
&lt;p>Some articles define eBPF as a &amp;ldquo;Virtual Machine&amp;rdquo; (in the concept of isolation, not the VMs like KVM thing) that run programs triggered by some Kernel action.&lt;/p>
&lt;p>As an example, imagine a system call that happens (like opening a file) and you want to trigger an action to count how many times that system call happens. Or a program that is triggered when a packet arrives on a specific network interface.&lt;/p>
&lt;p>Because those programs are written in C (yeah, sorry!), compiled and attached to some part of your system, eBPF needs to count with some user space area to read and write dynamic data. This area is called map, and can be manipulated while the eBPF program runs.&lt;/p>
&lt;p>So, for our examples, we’re going to write a really simple packet filter program, attach it to our network interface and see what and how it happens.&lt;/p>
&lt;p>For some more detailed explanation of eBPF, I recommend the following readings:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://docs.cilium.io/en/v1.8/bpf/">https://docs.cilium.io/en/v1.8/bpf/&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://ebpf.io/what-is-ebpf">https://ebpf.io/what-is-ebpf&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="methodology">Methodology&lt;/h2>
&lt;p>The methodology is going to be pretty much the same as the previous part of the article: write a program that logs and accept (or drop) a packet in port 12345, open a &lt;code>netcat&lt;/code> listening in this port and trigger the actions.&lt;/p>
&lt;p>So for the sake of this article, the &lt;em>action&lt;/em> that is going to trigger our program is a packet arriving on the network interface, and the magic is going to happen there.&lt;/p>
&lt;p>eBPF have at least two ways to deal with the packet filtering, like XDP, that I’m going to cover them now, and TC that I’ll cover in some other article&lt;/p>
&lt;h2 id="xdp">XDP&lt;/h2>
&lt;p>XDP, also known as eXpress Data Path is a specific eBPF program that runs close to the Network device. It’s run even before the packet can arrive at the kernel stack.&lt;/p>
&lt;p>There are some network devices that support executing XDP programs directly, so yes, XDP is so powerful that you can process and take an action (like drop) a packet almost in the wire, without needing to overload your kernel.&lt;/p>
&lt;p>Because such a low level processing is executed, we need to first have some understanding of how a network packet is composed, so let’s assume this is an Ethernet packet.&lt;/p>
&lt;p>&lt;img src="https://www.rkatz.xyz/images/mixpacketfilter/packet-dump.png" alt="A packet dump.">&lt;/p>
&lt;p>Nice, so we’re mostly interested in the IP part (the source and destination address) and TCP part (Dst port 12345).&lt;/p>
&lt;p>Hopefully there are some helper libraries that allow us to extract the part we’re interested in. I’ll not go through the situation &amp;ldquo;if this was an IPv6 IP packet&amp;rdquo;, but the program may be different.&lt;/p>
&lt;p>I’m using &lt;a href="https://duo.com/labs/tech-notes/writing-an-xdp-network-filter-with-ebpf">this nice article&lt;/a> as a reference to write my program, but will use a TCP packet instead of an UDP one.&lt;/p>
&lt;p>So, to start this, we need to have clear that this is a program being run almost in the wire, so we’re receiving bytes. Those bytes are represented by XDP with a struct called &lt;a href="https://github.com/torvalds/linux/blob/v5.9/include/uapi/linux/bpf.h#L3909-L3918">xdp_md&lt;/a> and contains all the necessary data encoded. In this struct you can see fields as &lt;code>data&lt;/code> (that represents the start of the packet), &lt;code>data_end&lt;/code> (that represents the end of the packet) and fields that represents which was the device that the packet arrive and leaves the machine (&lt;code>ingress_ifindex&lt;/code> and &lt;code>egress_ifindex&lt;/code>).&lt;/p>
&lt;p>But as far as I know and some folks have stated to me, XDP only works with ingressing packets, so you cannot take an action in a packet leaving the machine, other than changing it’s attributes, like the destination IP.&lt;/p>
&lt;p>Based on the &lt;a href="https://en.wikipedia.org/wiki/OSI_model">OSI Model&lt;/a> we will need to dissect the layer 2 (ethernet), shift to the layer 3 (the IP protocol) and then to the layer 4 (the TCP part) to get our information, so we’re going to code something like this to get our information:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="ln"> 1&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="nf">myxdpprog&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">struct&lt;/span> &lt;span class="nc">xdp_md&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">ctx&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="c1">// Receiving the bytes in the pointer &amp;#34;ctx&amp;#34;
&lt;/span>&lt;span class="ln"> 2&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">data&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">void&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">)(&lt;/span>&lt;span class="kt">long&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="n">ctx&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">data&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln"> 3&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">data_end&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">void&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">)(&lt;/span>&lt;span class="kt">long&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="n">ctx&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">data_end&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln"> 4&lt;/span> &lt;span class="k">struct&lt;/span> &lt;span class="nc">ethhdr&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">eth&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">data&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln"> 5&lt;/span>
&lt;span class="ln"> 6&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="p">((&lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="n">eth&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="k">sizeof&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">eth&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">&amp;lt;=&lt;/span> &lt;span class="n">data_end&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="c1">// Assuming this is an Ethernet Frame
&lt;/span>&lt;span class="ln"> 7&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">struct&lt;/span> &lt;span class="nc">iphdr&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">ip&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">data&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="k">sizeof&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">eth&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// Populating the IP part
&lt;/span>&lt;span class="ln"> 8&lt;/span>&lt;span class="c1">&lt;/span>
&lt;span class="ln"> 9&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="p">((&lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="n">ip&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="k">sizeof&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">ip&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">&amp;lt;=&lt;/span> &lt;span class="n">data_end&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln">10&lt;/span>
&lt;span class="ln">11&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">ip&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">protocol&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">IPPROTO_TCP&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln">12&lt;/span> &lt;span class="k">struct&lt;/span> &lt;span class="nc">tcphdr&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">tcp&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="n">ip&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="k">sizeof&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">ip&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// And then the TCP part
&lt;/span>&lt;span class="ln">13&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="p">[...]&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>OK, great. So this is a bunch of uncontextualized C code, what does this mean? Exactly what is stated before: we receive the bytes, and dissect them all over as a IPv4 packet with TCP protocol.&lt;/p>
&lt;p>Now that we have:&lt;/p>
&lt;ul>
&lt;li>An &lt;code>ip&lt;/code> variable containing a &lt;a href="https://github.com/torvalds/linux/blob/v5.9/include/uapi/linux/ip.h#L86-L106">iphdr&lt;/a> struct that contains fields like source (&lt;code>saddr&lt;/code>) and destination (&lt;code>daddr&lt;/code>) IPv4 address&lt;/li>
&lt;li>A &lt;code>tcp&lt;/code> variable containing a &lt;a href="https://github.com/torvalds/linux/blob/v5.9/include/uapi/linux/tcp.h#L25-L27">tcphdr&lt;/a> with fields like the source (&lt;code>source&lt;/code>) and destination (&lt;code>dest&lt;/code>) port.&lt;/li>
&lt;/ul>
&lt;p>Putting all this together we will have a &amp;ldquo;simple&amp;rdquo; program like this:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="ln"> 1&lt;/span>&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;linux/bpf.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="ln"> 2&lt;/span>&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;linux/if_ether.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="ln"> 3&lt;/span>&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;linux/ip.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="ln"> 4&lt;/span>&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;linux/tcp.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="ln"> 5&lt;/span>&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;netinet/in.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="ln"> 6&lt;/span>&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;bpf_helpers.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="ln"> 7&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="ln"> 8&lt;/span>&lt;span class="cp">#define bpf_printk(fmt, ...) \
&lt;/span>&lt;span class="ln"> 9&lt;/span>&lt;span class="cp">({ \
&lt;/span>&lt;span class="ln">10&lt;/span>&lt;span class="cp"> char ____fmt[] = fmt; \
&lt;/span>&lt;span class="ln">11&lt;/span>&lt;span class="cp"> bpf_trace_printk(____fmt, sizeof(____fmt), \
&lt;/span>&lt;span class="ln">12&lt;/span>&lt;span class="cp"> ##__VA_ARGS__); \
&lt;/span>&lt;span class="ln">13&lt;/span>&lt;span class="cp">})
&lt;/span>&lt;span class="ln">14&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="ln">15&lt;/span>&lt;span class="n">SEC&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;xdpprogram&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">16&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">myxdpprogram&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">struct&lt;/span> &lt;span class="nc">xdp_md&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">ctx&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln">17&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">data&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">void&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">)(&lt;/span>&lt;span class="kt">long&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="n">ctx&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">data&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln">18&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">data_end&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">void&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">)(&lt;/span>&lt;span class="kt">long&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="n">ctx&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">data_end&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln">19&lt;/span> &lt;span class="c1">// Dissecting the Ethernet Frame
&lt;/span>&lt;span class="ln">20&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">struct&lt;/span> &lt;span class="nc">ethhdr&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">eth&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">data&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln">21&lt;/span>
&lt;span class="ln">22&lt;/span> &lt;span class="c1">// Does the size of the packet really fits as an Ethernet Frame
&lt;/span>&lt;span class="ln">23&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="p">((&lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="n">eth&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="k">sizeof&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">eth&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">&amp;lt;=&lt;/span> &lt;span class="n">data_end&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln">24&lt;/span>
&lt;span class="ln">25&lt;/span> &lt;span class="c1">// Dissecting the IPv4 part
&lt;/span>&lt;span class="ln">26&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">struct&lt;/span> &lt;span class="nc">iphdr&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">ip&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">data&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="k">sizeof&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">eth&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="ln">27&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="p">((&lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="n">ip&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="k">sizeof&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">ip&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">&amp;lt;=&lt;/span> &lt;span class="n">data_end&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln">28&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">ip&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">protocol&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">IPPROTO_TCP&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln">29&lt;/span>
&lt;span class="ln">30&lt;/span> &lt;span class="c1">// Dissecting the TCP part of the program
&lt;/span>&lt;span class="ln">31&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">struct&lt;/span> &lt;span class="nc">tcphdr&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">tcp&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="n">ip&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="k">sizeof&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">ip&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="ln">32&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="p">((&lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="n">tcp&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="k">sizeof&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">tcp&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">&amp;lt;=&lt;/span> &lt;span class="n">data_end&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln">33&lt;/span>
&lt;span class="ln">34&lt;/span> &lt;span class="c1">// And now we can see if this is port 12345 :)
&lt;/span>&lt;span class="ln">35&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">tcp&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">dest&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">ntohs&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">12345&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln">36&lt;/span> &lt;span class="n">bpf_printk&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;XDP drop on TCP port 12345&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="ln">37&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">XDP_DROP&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln">38&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="ln">39&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="ln">40&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="ln">41&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="ln">42&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="ln">43&lt;/span> &lt;span class="c1">// Take a default action
&lt;/span>&lt;span class="ln">44&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">XDP_PASS&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln">45&lt;/span>&lt;span class="p">}&lt;/span>
&lt;span class="ln">46&lt;/span>
&lt;span class="ln">47&lt;/span>&lt;span class="kt">char&lt;/span> &lt;span class="n">_license&lt;/span>&lt;span class="p">[]&lt;/span> &lt;span class="n">SEC&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;license&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;GPL&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Wow wait! What is this all about?&lt;/p>
&lt;p>OK, so first of all, eBPF programs should ALWAYS return from the function, otherwise they won’t compile. XDP programs have some &lt;a href="https://github.com/torvalds/linux/blob/v5.9/include/uapi/linux/bpf.h#L3898-L3904">actions&lt;/a> that can be taken:&lt;/p>
&lt;ul>
&lt;li>&lt;code>XDP_DROP&lt;/code> - Drops the packet&lt;/li>
&lt;li>&lt;code>XDP_PASS&lt;/code> - Pass the packet&lt;/li>
&lt;li>&lt;code>XDP_TX&lt;/code> - Returns the packet to the interface that received it&lt;/li>
&lt;li>&lt;code>XDP_REDIRECT&lt;/code> - Redirect the packet to another interface&lt;/li>
&lt;li>&lt;code>XDP_ABORTED&lt;/code> - An error in the application happened, and the packet is also dropped.&lt;/li>
&lt;/ul>
&lt;p>Also, remember the code runs as a Kernel program? This way, we cannot simply log with a printf call. Instead we need to log as a kernel program and this is what the call of &lt;code>bpf_printk&lt;/code> does. This is a macro defined in the top of the file, and which calls &lt;code>bpf_trace_printk&lt;/code> that is provided by the header &amp;ldquo;&amp;lt;bpf_helpers.h&amp;gt;&amp;rdquo; which is part of libbpf and will be shown further.&lt;/p>
&lt;p>The &lt;code>SEC&lt;/code> directive is a macro that defines the program name that the &amp;ldquo;ip command&amp;rdquo; (you’ll see it later) looks to load into the device. You can have multiple programs in the same source code, this way you need to name them.&lt;/p>
&lt;p>Also, we need to convert the integer &amp;ldquo;12345&amp;rdquo; to something that represents the port in the packet, so the function &lt;a href="https://linux.die.net/man/3/ntohs">ntohs&lt;/a> is used. This is provided by the header &amp;ldquo;netinet/in.h&amp;rdquo;.&lt;/p>
&lt;p>Finally, because we’re using the helpers functions, the license of the program MUST BE GPL, so the last line defines that.&lt;/p>
&lt;h2 id="compiling-and-loading-everything">Compiling and loading everything&lt;/h2>
&lt;p>OK, so we have our program. How can we use it? It needs to be compiled with and loaded in the device that is going to deal with the packets.&lt;/p>
&lt;p>There’s a bunch of ways of doing this, I’ll try to keep it simple.&lt;/p>
&lt;p>First of all, you need to install all the necessary tools to compile the program. You can find the dependencies for a good number of distros &lt;a href="https://github.com/xdp-project/xdp-tutorial/blob/master/setup_dependencies.org">here&lt;/a>. In my case, I’m using an Ubuntu Server for the tests so:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>sudo apt install clang llvm libelf-dev libpcap-dev gcc-multilib build-essential linux-tools-common linux-tools-generic
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Also you’ll need to download libbpf:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>git clone https://github.com/libbpf/libbpf.git
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Now, to compile the program, considering it&amp;rsquo;s source is called &lt;code>drop12345.c&lt;/code>, simple do:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="ln">1&lt;/span>clang -Ilibbpf/src -O2 -target bpf -c drop12345.c -o drop12345.o
&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>&lt;em>NOTE&lt;/em>: Please be aware, I don’t know if this is the safer way to compile the program, as this is an EXAMPLE!!&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>&lt;em>NOTE2&lt;/em>: If you have errors compiling, make sure the -I argument is pointing to the libbpf/src directory, and also that you’re using the right libraries in the &amp;ldquo;include&amp;rdquo; directives on the C code. Also that you have all the linux kernel headers file installed :)&lt;/p>
&lt;/blockquote>
&lt;p>And voilà! You have an object called &amp;ldquo;drop12345.o&amp;rdquo; that can be loaded in your network device.&lt;/p>
&lt;p>So let’s do it (remember to replace &lt;code>ens33&lt;/code> with the name of your device)&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="ln">1&lt;/span>ip link set dev ens33 xdp obj drop12345.o sec xdpprogram
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Now you can try to connect to the port 12345 of your host, and see the logs with:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="ln">1&lt;/span>sudo cat /sys/kernel/debug/tracing/trace_pipe
&lt;span class="ln">2&lt;/span> &amp;lt;idle&amp;gt;-0 [001] ..s. 6541.153908: 0: XDP drop on TCP port 12345
&lt;span class="ln">3&lt;/span>[...]
&lt;/code>&lt;/pre>&lt;/div>&lt;p>If you need to unload the program, simple do:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="ln">1&lt;/span>ip link set dev ens33 xdp off
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="and-where-is-xdp-positioned">And where is XDP positioned?&lt;/h2>
&lt;p>So remember when I said earlier that the XDP programs are executed before the packet can have a chance to reach the rest of kernel stack?&lt;/p>
&lt;p>In the previous article, we’ve seen that nftables is positioned before iptables when dealing with filtering, so let’s load our previous nftables ruleset, and see if the packet is logged by XDP or by nftables:&lt;/p>
&lt;p>Before loading the XDP program, we can see by the timestamp that nftables is dropping the packet:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="ln">1&lt;/span>[ 6976.808976] nft-inputIN=ens33 SRC=192.168.86.1 DST=192.168.86.128 DPT=12345
&lt;/code>&lt;/pre>&lt;/div>&lt;p>But then, when the xdp program is loaded, no further log appears in nftables stack, but take a look at the timestamp of the following message:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="ln">1&lt;/span>7237.743455: 0: XDP drop on TCP port 12345
&lt;/code>&lt;/pre>&lt;/div>&lt;p>To confirm:&lt;/p>
&lt;p>&lt;img src="https://www.rkatz.xyz/images/mixpacketfilter/input-xdp.png" alt="The input flow with XDP.">&lt;/p>
&lt;p>I’m not going to make the Output test, as it’s stated that XDP is only for incoming packets. But I can try to take further tests in some later article :)&lt;/p>
&lt;h2 id="final-thoughts-and-next-steps">Final Thoughts and next steps&lt;/h2>
&lt;p>Right now the program is simple and static, so if you need to dynamic update it you need to change the code and recompile it. eBPF can use a structure called &lt;code>map&lt;/code>, which can be used to &amp;ldquo;trade&amp;rdquo; informations between the running program and userspace, as an example dinamically feeding a program with IPs that should be blocked.&lt;/p>
&lt;p>&lt;em>In my opinion&lt;/em>, the biggest issue when using eBPF is to know exactly what is being executed, as this is a static compiled program. One can compile and attach it to a network interface and if you don’t have the source code, you won’t know what is happening, while with IPTables and NFTables you can simply dump the rules.&lt;/p>
&lt;p>A tool called &lt;code>bpftool&lt;/code> can be used to show you things like &amp;ldquo;What program is loaded in which part of the system&amp;rdquo;, like XDP or TC (that will be covered in the next post), but still, you only know where, but not what. There was an effort to create a program called &amp;ldquo;bpfilter&amp;rdquo;, but it seems to be frozen right now.&lt;/p>
&lt;p>Finally, XDP is not the only way that you can use eBPF programs to make packet filtering in Linux and in the next article I will cover how eBPF + TC programs works :)&lt;/p>
&lt;p>Thank you for reading this, I expect to clarify a little bit this new world (also for me!) of eBPF stuff :)&lt;/p>
&lt;p>And thanks for all the hard work the community has been doing making eBPF a great new technology, and also documenting! The next section have some nice references that I’ve used, but there’s a lot more materials, posts, etc.&lt;/p>
&lt;h2 id="references">References:&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://ebpf.io">https://ebpf.io&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://prototype-kernel.readthedocs.io/en/latest/networking/XDP/implementation/xdp_actions.html">https://prototype-kernel.readthedocs.io/en/latest/networking/XDP/implementation/xdp_actions.html&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://toonk.io/building-an-xdp-express-data-path-based-bgp-peering-router/index.html">https://toonk.io/building-an-xdp-express-data-path-based-bgp-peering-router/index.html&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://duo.com/labs/tech-notes/writing-an-xdp-network-filter-with-ebpf">https://duo.com/labs/tech-notes/writing-an-xdp-network-filter-with-ebpf&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/xdp-project/xdp-tutorial/">https://github.com/xdp-project/xdp-tutorial/&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://ebpf.io">https://ebpf.io&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://medium.com/@fntlnz/load-xdp-programs-using-the-ip-iproute2-command-502043898263">https://medium.com/@fntlnz/load-xdp-programs-using-the-ip-iproute2-command-502043898263&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.winet.dcc.ufmg.br/ebpf/processamento_rapido_de_pacotes_com_ebpf_e_xdp.pdf">https://www.winet.dcc.ufmg.br/ebpf/processamento_rapido_de_pacotes_com_ebpf_e_xdp.pdf&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://qmonnet.github.io/whirl-offload/2016/09/01/dive-into-bpf/">https://qmonnet.github.io/whirl-offload/2016/09/01/dive-into-bpf/&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.cilium.io/en/v1.8/bpf/">https://docs.cilium.io/en/v1.8/bpf/&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>The mix (and mess) of Packet Filter Linux - Part 1</title><link>https://www.rkatz.xyz/post/2020-09-13-the-mix-of-packet-filter-linux-part1/</link><pubDate>Sun, 13 Sep 2020 22:13:56 -0300</pubDate><guid>https://www.rkatz.xyz/post/2020-09-13-the-mix-of-packet-filter-linux-part1/</guid><description>
&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>So you’ve got a brand new Linux distribution. You start your Kubernetes distributions, and decide for a specific CNI that provides network policies.&lt;/p>
&lt;p>Then you figure out that something is (or is not) working, does an &lt;code>iptables -L&lt;/code> to check what is going on and boom: where are all my iptables rules? Worst of all, you put some newer rules but they seem not to work and your traffic is still being blocked.&lt;/p>
&lt;p>Well, welcome to modern Linux. IPTables is not anymore the only way of doing packet filtering (since a long time, to be honest) and there might be something else blocking it.&lt;/p>
&lt;p>The idea of this article is to show some of those packet filtering technologies, with simple examples and what’s their position during the packet filtering inside the flow.&lt;/p>
&lt;p>&lt;strong>Spoiler alert:&lt;/strong> I’m not really an IPTables/nftables/eBPF specialist (far from that), and the idea here is to study the impact of each one. Feedbacks of this study are more than welcome!&lt;/p>
&lt;h2 id="a-little-bit-of-history">A little bit of history&lt;/h2>
&lt;p>Back in time (before I’ve ever started to work with Linux), kernel 2.2 did already have capabilities of packet filtering with &lt;strong>&lt;a href="https://en.wikipedia.org/wiki/Ipchains">ipchains&lt;/a>&lt;/strong>&lt;/p>
&lt;p>In 1998 it was superseded by &lt;strong>&lt;a href="https://en.wikipedia.org/wiki/Iptables">iptables&lt;/a>&lt;/strong> which has been the de-facto command to make packet filtering in Linux since then.&lt;/p>
&lt;p>And why do I say “command”? Well, Linux is only a kernel composed of features. The packet filtering is done inside the kernel, once the packet arrives in the network card and until it leaves the host. Iptables is the command, in userspace that knows how to say to the kernel “insert this rule that will DROP all the icmp packets”, as an example.&lt;/p>
&lt;p>The same happens in almost everything in Linux. When you issue the “ls” command, ls is a program inside the userspace that will make a &lt;strong>&lt;a href="https://en.wikipedia.org/wiki/System_call">syscall&lt;/a>&lt;/strong> to Linux Kernel, that will then ask for the filesystem which files it have (which turns into another call to the disk, listing it contents).&lt;/p>
&lt;p>So from now one, when we say “iptables” and “nftables”, remember that all of them are just a layer/commands that call the kernel API and put rules into that for the proper packet filtering. By the way, the part of the kernel that deals with packet filtering for both of those programs is called “netfilter” but each one have its special part in the netfilter subsystem.&lt;/p>
&lt;p>I’ll not enter into eBPF behavior right now, as it’s a program that is compiled and runs inside the kernel (not a userspace command). We’ll see more about that in the Part 2 of the article&lt;/p>
&lt;p>Well, going back to history: after iptables, in 2014 &lt;strong>&lt;a href="https://en.wikipedia.org/wiki/Nftables">nftables&lt;/a>&lt;/strong> got merged into the kernel. Now the thing here is that, nftables also uses netfilter, but in a different part of the kernel. So you might have iptables and nftables co-existing, but one does not know about the existence of the other.&lt;/p>
&lt;p>Yes, it happens. A packet might arrive in the nftables part of the netfilter, but never arrive in the iptables part. And we will see that happening in detail.&lt;/p>
&lt;p>In parallel with nftables, a new technology called &lt;strong>&lt;a href="https://ebpf.io/">eBPF&lt;/a>&lt;/strong> was rising in the kernel. But the main idea of eBPF wasn’t to be packet filtering (although the name is Extended Berkeley Packet Filtering) but allow programs to be compiled and attached to the kernel to provide observability, networking and other features.&lt;/p>
&lt;h2 id="methodology">Methodology&lt;/h2>
&lt;p>So for this study, the methodology is going to be quite simple. I’ll install a Linux distribution with Kernel &amp;gt;= 5.4, and make the following tests:&lt;/p>
&lt;ul>
&lt;li>Run a simple tcp port 12345 with netcat to verify the port is open: &lt;code>nc -l -k 12345&lt;/code>&lt;/li>
&lt;li>Create rules to log and drop a packet to TCP port 12345 in each of the netfilter stacks and check the logs to see where is it being dropped.&lt;/li>
&lt;li>Change the rules to accept the packet in each of the netfilter stacks, and check what&amp;rsquo;s the way the packet flows through the logs.&lt;/li>
&lt;li>Make some experiments / inversions both in input and output chains to gather more information about the positioning of each stacks&lt;/li>
&lt;li>Put some eBPF + XDP (in part 2) and check if the package arrives at the netfilter stack&lt;/li>
&lt;li>Make the same test, but now putting eBPF + TC program (again, in part 2)&lt;/li>
&lt;li>Try to join all of this with OVS and check what’s the position of OVS in the above mess :)&lt;/li>
&lt;/ul>
&lt;p>I’m not entering into the packet forwarding flow (the machine acting as a router) in this article, but this can be explored further later (maybe a Part 3?)&lt;/p>
&lt;h2 id="iptables">IPTables&lt;/h2>
&lt;p>So now, let’s go through IPTables with some brief explanation.&lt;/p>
&lt;p>IPTables as the name says is composed by&amp;hellip;tables! Tadah! So, basically you have 4 tables here:&lt;/p>
&lt;ul>
&lt;li>Filter -&amp;gt; deals with packet filtering inside the machine. &lt;strong>We’re going to use this one in this article&lt;/strong>&lt;/li>
&lt;li>Nat -&amp;gt; Deals with packets being routed through the machine.&lt;/li>
&lt;li>Mangle -&amp;gt; Deals with packet behavior changing&lt;/li>
&lt;li>Raw -&amp;gt; this is a special one. Raw table deals with packets before the kernel starts tracking it (see conntrack).&lt;/li>
&lt;/ul>
&lt;p>The below picture shows the packet flowing through iptables:&lt;/p>
&lt;p>&lt;img src="https://www.rkatz.xyz/images/mixpacketfilter/iptables-diagram.png" alt="IPTables flow.">
Original picture from: &lt;a href="https://www.booleanworld.com/depth-guide-iptables-linux-firewall/">https://www.booleanworld.com/depth-guide-iptables-linux-firewall/&lt;/a>&lt;/p>
&lt;p>So, to get started let’s create the simpler log and drop iptables rule. I’ll use the command iptables-legacy to use the old iptables, as the actual “iptables” command points to iptables-nft which inserts the rule into nftables:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>iptables-legacy -A INPUT -p tcp --dport &lt;span class="m">12345&lt;/span> -j LOG --log-level &lt;span class="m">4&lt;/span> --log-prefix ipt-input
&lt;span class="ln">2&lt;/span>iptables-legacy -A INPUT -p tcp --dport &lt;span class="m">12345&lt;/span> -j DROP
&lt;span class="ln">3&lt;/span>iptables-legacy -A OUTPUT -p tcp --sport &lt;span class="m">12345&lt;/span> -j LOG --log-level &lt;span class="m">4&lt;/span> --log-prefix ipt-output
&lt;/code>&lt;/pre>&lt;/div>&lt;p>With the code above, the linux kernel will log, with a level of “Warning” when a packet arrives in tcp port 12345 and drop it. Also when it leaves the machine with source port 12345 it will be logged (for further tests). Assuming the port 12345 is up and listening connections, and the above filter rules has been already created, let’s see what happens in the log. I&amp;rsquo;m wrapping the log here to fit in the code snippet ;)&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-s" data-lang="s">&lt;span class="ln">1&lt;/span>&lt;span class="n">Sep&lt;/span> &lt;span class="m">13&lt;/span> &lt;span class="m">20&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="m">34&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="m">53&lt;/span> &lt;span class="n">fw123&lt;/span> &lt;span class="n">kernel&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="n">[&lt;/span> &lt;span class="m">719.092757&lt;/span>&lt;span class="n">]&lt;/span> &lt;span class="n">ipt&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">input&lt;/span> &lt;span class="n">IN&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">ens33&lt;/span> &lt;span class="n">OUT&lt;/span>&lt;span class="o">=&lt;/span> &lt;span class="n">MAC&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">00&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="m">0&lt;/span>&lt;span class="n">c&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="m">29&lt;/span> &lt;span class="n">[...]&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>So the packet arrives into the stack and gots logged. After that, the packet is dropped by the &lt;strong>DROP&lt;/strong> rule.&lt;/p>
&lt;h2 id="adding-nftables-to-the-recipe">Adding NFTables to the recipe&lt;/h2>
&lt;p>As IPTables, NFtables also works with tables. But differently from IPTables, nftables was designed so the chain of rules is much more simpler, so when you got a rule that needs to “log and then drop” the rule is evaluated as once, instead of going through the whole stack. Also iptables deals natively with “ipset”, which allows you to create rules with sets that can be updated dynamically, instead of having the need to change directly a rule (delete a rule, create a newer rule).&lt;/p>
&lt;p>There are some other features that I’m not going to jump in here, but it’s worth reading nftables wiki: &lt;a href="https://wiki.nftables.org/wiki-nftables/index.php/Main_Page">https://wiki.nftables.org/wiki-nftables/index.php/Main_Page&lt;/a> and there’s a nice nftables reference and comparison here: &lt;a href="https://www.slideshare.net/azilian/nftables-the-evolution-of-linux-firewall">https://www.slideshare.net/azilian/nftables-the-evolution-of-linux-firewall&lt;/a>&lt;/p>
&lt;p>So to create nftables rules, we can go through two different ways: using the nft command, that deals natively with the nftables netfilter stack, or using the iptables-nft command, that brings compatibility with iptables command syntax.&lt;/p>
&lt;p>For this test I’ll use the native command and load the following rules:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="ln"> 1&lt;/span>&lt;span class="nx">flush&lt;/span> &lt;span class="nx">ruleset&lt;/span>
&lt;span class="ln"> 2&lt;/span>
&lt;span class="ln"> 3&lt;/span>&lt;span class="nx">table&lt;/span> &lt;span class="nx">inet&lt;/span> &lt;span class="nx">filter&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln"> 4&lt;/span> &lt;span class="nx">chain&lt;/span> &lt;span class="nx">input&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln"> 5&lt;/span> &lt;span class="nx">type&lt;/span> &lt;span class="nx">filter&lt;/span> &lt;span class="nx">hook&lt;/span> &lt;span class="nx">input&lt;/span> &lt;span class="nx">priority&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln"> 6&lt;/span> &lt;span class="nx">tcp&lt;/span> &lt;span class="nx">dport&lt;/span> &lt;span class="mi">12345&lt;/span> &lt;span class="nx">log&lt;/span> &lt;span class="nx">level&lt;/span> &lt;span class="nx">warn&lt;/span> &lt;span class="nx">prefix&lt;/span> &lt;span class="s2">&amp;#34;nft-input&amp;#34;&lt;/span> &lt;span class="nx">accept&lt;/span>
&lt;span class="ln"> 7&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="ln"> 8&lt;/span> &lt;span class="nx">chain&lt;/span> &lt;span class="nx">forward&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln"> 9&lt;/span> &lt;span class="nx">type&lt;/span> &lt;span class="nx">filter&lt;/span> &lt;span class="nx">hook&lt;/span> &lt;span class="nx">forward&lt;/span> &lt;span class="nx">priority&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln">10&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="ln">11&lt;/span> &lt;span class="nx">chain&lt;/span> &lt;span class="nx">output&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln">12&lt;/span> &lt;span class="nx">type&lt;/span> &lt;span class="nx">filter&lt;/span> &lt;span class="nx">hook&lt;/span> &lt;span class="nx">output&lt;/span> &lt;span class="nx">priority&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln">13&lt;/span> &lt;span class="nx">tcp&lt;/span> &lt;span class="nx">sport&lt;/span> &lt;span class="mi">12345&lt;/span> &lt;span class="nx">log&lt;/span> &lt;span class="nx">level&lt;/span> &lt;span class="nx">warn&lt;/span> &lt;span class="nx">prefix&lt;/span> &lt;span class="s2">&amp;#34;nft-output&amp;#34;&lt;/span> &lt;span class="nx">accept&lt;/span>
&lt;span class="ln">14&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="ln">15&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>So the rules above will log and accept the package. This way, we can see if it flows first into iptables or nftables. If iptables is in the front, the package will be dropped without any log from nftables. They can be loaded with &lt;code>nft -f file-containing-rules&lt;/code>&lt;/p>
&lt;p>So our scenario now is:&lt;/p>
&lt;ul>
&lt;li>nftables input -&amp;gt; accept&lt;/li>
&lt;li>iptables input -&amp;gt; drop&lt;/li>
&lt;/ul>
&lt;p>And here it is. By the log below, we can see it entering nftables and then iptables. Again, the logs are wrapped to fit into the code snippet:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-s" data-lang="s">&lt;span class="ln">1&lt;/span>&lt;span class="n">Sep&lt;/span> &lt;span class="m">13&lt;/span> &lt;span class="m">21&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="m">14&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="m">26&lt;/span> &lt;span class="n">fw123&lt;/span> &lt;span class="n">kernel&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="n">[&lt;/span> &lt;span class="m">3092.194827&lt;/span>&lt;span class="n">]&lt;/span> &lt;span class="n">nft&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">input&lt;/span> &lt;span class="n">IN&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">ens33&lt;/span> &lt;span class="n">OUT&lt;/span>&lt;span class="o">=&lt;/span> &lt;span class="n">MAC&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">00&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="m">0&lt;/span>&lt;span class="n">c&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="m">29&lt;/span> &lt;span class="n">[...]&lt;/span>
&lt;span class="ln">2&lt;/span>&lt;span class="n">Sep&lt;/span> &lt;span class="m">13&lt;/span> &lt;span class="m">21&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="m">14&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="m">26&lt;/span> &lt;span class="n">fw123&lt;/span> &lt;span class="n">kernel&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="n">[&lt;/span> &lt;span class="m">3092.194869&lt;/span>&lt;span class="n">]&lt;/span> &lt;span class="n">ipt&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">input&lt;/span> &lt;span class="n">IN&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">ens33&lt;/span> &lt;span class="n">OUT&lt;/span>&lt;span class="o">=&lt;/span> &lt;span class="n">MAC&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">00&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="m">0&lt;/span>&lt;span class="n">c&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="m">29&lt;/span> &lt;span class="n">[...]&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Let’s change the input scenario to the following:&lt;/p>
&lt;ul>
&lt;li>nftables input -&amp;gt; drop&lt;/li>
&lt;li>iptables input -&amp;gt; drop&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-s" data-lang="s">&lt;span class="ln">1&lt;/span>&lt;span class="n">Sep&lt;/span> &lt;span class="m">13&lt;/span> &lt;span class="m">21&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="m">16&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="m">38&lt;/span> &lt;span class="n">fw123&lt;/span> &lt;span class="n">kernel&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="n">[&lt;/span> &lt;span class="m">3224.260511&lt;/span>&lt;span class="n">]&lt;/span> &lt;span class="n">nft&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">input&lt;/span> &lt;span class="n">IN&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">ens33&lt;/span> &lt;span class="n">OUT&lt;/span>&lt;span class="o">=&lt;/span> &lt;span class="n">MAC&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">00&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="m">0&lt;/span>&lt;span class="n">c&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="m">29&lt;/span> &lt;span class="n">[...]&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>No further iptables log appears!&lt;/strong>. This means that, regarding the iptables and nftables input flow, we can say that nftables has precedence over iptables as the following diagram:&lt;/p>
&lt;p>&lt;img src="https://www.rkatz.xyz/images/mixpacketfilter/input-flow-ipt-nft.png" alt="The input flow.">&lt;/p>
&lt;p>So let’s move to the output scenario. What I want to check is: who is the last mile when a packet is leaving the host? IPTables or NFTables?&lt;/p>
&lt;p>So remember that iptables rules were created to accept the output? So we can change the input rules of both nftables and iptables to log/accept, and then start working in the output rules:&lt;/p>
&lt;ul>
&lt;li>iptables output -&amp;gt; log/drop&lt;/li>
&lt;li>nftables output -&amp;gt; log/accept&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-s" data-lang="s">&lt;span class="ln">1&lt;/span>&lt;span class="n">Sep&lt;/span> &lt;span class="m">13&lt;/span> &lt;span class="m">21&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="m">27&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="m">12&lt;/span> &lt;span class="n">fw123&lt;/span> &lt;span class="n">kernel&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="n">[&lt;/span> &lt;span class="m">3858.172623&lt;/span>&lt;span class="n">]&lt;/span> &lt;span class="n">nft&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">input&lt;/span> &lt;span class="n">IN&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">ens33&lt;/span> &lt;span class="n">OUT&lt;/span>&lt;span class="o">=&lt;/span> &lt;span class="n">MAC&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">00&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="m">0&lt;/span>&lt;span class="n">c&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="m">29&lt;/span> &lt;span class="n">[...]&lt;/span>
&lt;span class="ln">2&lt;/span>&lt;span class="n">Sep&lt;/span> &lt;span class="m">13&lt;/span> &lt;span class="m">21&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="m">27&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="m">12&lt;/span> &lt;span class="n">fw123&lt;/span> &lt;span class="n">kernel&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="n">[&lt;/span> &lt;span class="m">3858.172684&lt;/span>&lt;span class="n">]&lt;/span> &lt;span class="n">ipt&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">input&lt;/span> &lt;span class="n">IN&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">ens33&lt;/span> &lt;span class="n">OUT&lt;/span>&lt;span class="o">=&lt;/span> &lt;span class="n">MAC&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">00&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="m">0&lt;/span>&lt;span class="n">c&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="m">29&lt;/span> &lt;span class="n">[...]&lt;/span>
&lt;span class="ln">3&lt;/span>&lt;span class="n">Sep&lt;/span> &lt;span class="m">13&lt;/span> &lt;span class="m">21&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="m">27&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="m">12&lt;/span> &lt;span class="n">fw123&lt;/span> &lt;span class="n">kernel&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="n">[&lt;/span> &lt;span class="m">3858.172736&lt;/span>&lt;span class="n">]&lt;/span> &lt;span class="n">nft&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">output&lt;/span> &lt;span class="n">IN&lt;/span>&lt;span class="o">=&lt;/span> &lt;span class="n">OUT&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">ens33&lt;/span> &lt;span class="n">SRC&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">192.168.86.128&lt;/span> &lt;span class="n">[...]&lt;/span>
&lt;span class="ln">4&lt;/span>&lt;span class="n">Sep&lt;/span> &lt;span class="m">13&lt;/span> &lt;span class="m">21&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="m">27&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="m">12&lt;/span> &lt;span class="n">fw123&lt;/span> &lt;span class="n">kernel&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="n">[&lt;/span> &lt;span class="m">3858.172750&lt;/span>&lt;span class="n">]&lt;/span> &lt;span class="n">ipt&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">output&lt;/span> &lt;span class="n">IN&lt;/span>&lt;span class="o">=&lt;/span> &lt;span class="n">OUT&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">ens33&lt;/span> &lt;span class="n">SRC&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">192.168.86.128&lt;/span> &lt;span class="n">[...]&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>So what we can see here is that the packet enters into nftables, then goes to iptables, goes back to nftables and then reaches iptables.&lt;/p>
&lt;p>Can we surely say that iptables is the last mile of the packet processing? Let’s change the rules to:&lt;/p>
&lt;ul>
&lt;li>iptables output -&amp;gt; accept&lt;/li>
&lt;li>nftables output -&amp;gt; drop&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-s" data-lang="s">&lt;span class="ln">1&lt;/span>&lt;span class="n">Sep&lt;/span> &lt;span class="m">13&lt;/span> &lt;span class="m">21&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="m">30&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="m">27&lt;/span> &lt;span class="n">fw123&lt;/span> &lt;span class="n">kernel&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="n">[&lt;/span> &lt;span class="m">4052.554977&lt;/span>&lt;span class="n">]&lt;/span> &lt;span class="n">nft&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">input&lt;/span> &lt;span class="n">IN&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">ens33&lt;/span> &lt;span class="n">OUT&lt;/span>&lt;span class="o">=&lt;/span> &lt;span class="n">MAC&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">00&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="m">0&lt;/span>&lt;span class="n">c&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="m">29&lt;/span> &lt;span class="n">[...]&lt;/span>
&lt;span class="ln">2&lt;/span>&lt;span class="n">Sep&lt;/span> &lt;span class="m">13&lt;/span> &lt;span class="m">21&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="m">30&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="m">27&lt;/span> &lt;span class="n">fw123&lt;/span> &lt;span class="n">kernel&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="n">[&lt;/span> &lt;span class="m">4052.555079&lt;/span>&lt;span class="n">]&lt;/span> &lt;span class="n">ipt&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">input&lt;/span> &lt;span class="n">IN&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">ens33&lt;/span> &lt;span class="n">OUT&lt;/span>&lt;span class="o">=&lt;/span> &lt;span class="n">MAC&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">00&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="m">0&lt;/span>&lt;span class="n">c&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="m">29&lt;/span> &lt;span class="n">[...]&lt;/span>
&lt;span class="ln">3&lt;/span>&lt;span class="n">Sep&lt;/span> &lt;span class="m">13&lt;/span> &lt;span class="m">21&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="m">30&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="m">27&lt;/span> &lt;span class="n">fw123&lt;/span> &lt;span class="n">kernel&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="n">[&lt;/span> &lt;span class="m">4052.555137&lt;/span>&lt;span class="n">]&lt;/span> &lt;span class="n">nft&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">output&lt;/span> &lt;span class="n">IN&lt;/span>&lt;span class="o">=&lt;/span> &lt;span class="n">OUT&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">ens33&lt;/span> &lt;span class="n">SRC&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">192.168.86.128&lt;/span> &lt;span class="n">[...]&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>So here it is. The packet never reaches the output log rule from iptables. So we can surely say that the following represents a diagram of the packet flowing to outside of the host:&lt;/p>
&lt;p>&lt;img src="https://www.rkatz.xyz/images/mixpacketfilter/output-flow-ipt-nft.png" alt="The output flow.">&lt;/p>
&lt;h2 id="conclusion-so-far">Conclusion (so far)&lt;/h2>
&lt;p>So you got something strange in your environment and don’t know why some traffic is being blocked even if no iptables rule is doing that. As we’ve seen here, nftables rules have precedence over iptables rules.&lt;/p>
&lt;p>If they were created with the compatibility command line tool (iptables-nft) you should first take a look into the output of both commands: &lt;code>iptables-legacy -L&lt;/code> and &lt;code>iptables-nft -L&lt;/code> and try to understand if there are rules in both places, what is inserting those rules there and why.&lt;/p>
&lt;p>Kubernetes, as an example, has a nice wrapper called.. &lt;a href="https://github.com/kubernetes-sigs/iptables-wrappers/">iptables-wrapper&lt;/a> and helps the components that use iptables to decide which one should be used: the legacy one or the compatible one. But remember, as Kubernetes is not aware of how the other parts of the system (aka CNIs) insert the rules, you might have something messing up with things :)&lt;/p>
&lt;p>In the next part of this article I’ll take a look into eBPF and the multiple ways of packet filtering. And also, how they deal with netfilter stack.&lt;/p></description></item><item><title>Flatcar Linux in VMware Player — 5 minute command line deploy</title><link>https://www.rkatz.xyz/post/2020-09-13-flatcar/</link><pubDate>Sun, 13 Sep 2020 20:28:50 -0300</pubDate><guid>https://www.rkatz.xyz/post/2020-09-13-flatcar/</guid><description>
&lt;p>So I needed to create a new Kubernetes Lab. Back in time, I’ve created a &lt;a href="https://github.com/rikatz/coreos-vmplayer-deployer">shell script&lt;/a> to deploy a lot of CoreOS servers to my VMware Player, but I hadn’t touched that script since that time.&lt;/p>
&lt;p>With the deprecation of CoreOS and the glorious rise of Flatcar Linux to save us, and while needing to test some stuffs in Calico, it came to my mind ‘why not write how to quick deploy a Flatcar Linux VM in VMware Player without scripts?’. So here we go.&lt;/p>
&lt;p>You will need:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://stable.release.flatcar-linux.net/amd64-usr/current/flatcar_production_vmware_ova.ova">The OVA of Flatcar Linux&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/flatcar-linux/container-linux-config-transpiler/releases">CoreOS Configuration Transpiler&lt;/a> (or you can write your &lt;a href="https://docs.flatcar-linux.org/ignition/what-is-ignition/">Ignition&lt;/a> file by your own, but really, not recommended). BTW you will need to compile Configuration Transpiler (sorry about that), but I think in a near future they will provide binaries. Anyway, it’s a simple and single Go program compilation&lt;/li>
&lt;li>VMware player / ovftool and both are included in the VMware player installer&lt;/li>
&lt;/ul>
&lt;h2 id="writing-the-configuration-file">Writing the Configuration File&lt;/h2>
&lt;p>So the first step is to generate a valid &lt;a href="https://docs.flatcar-linux.org/container-linux-config-transpiler/doc/examples/">Container Linux Configuration&lt;/a> containing at least a user with an SSH key and the hostname of the VM. You can configure the VM with whatever is supported by the Configuration.&lt;/p>
&lt;p>Let’s create a file called &lt;code>config.yaml&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="ln"> 1&lt;/span>&lt;span class="nt">passwd&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln"> 2&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">users&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln"> 3&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">core&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln"> 4&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">ssh_authorized_keys&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln"> 5&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">ssh-rsa AAAAB3NzaC1y...... user@springfield&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln"> 6&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">storage&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln"> 7&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">files&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln"> 8&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">path&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">/etc/hostname&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln"> 9&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">filesystem&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">root&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln">10&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">mode&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">0644&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln">11&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">contents&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln">12&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">inline&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">homer&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln">13&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">user&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln">14&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">id&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">0&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln">15&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">group&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln">16&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">id&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">0&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The above code will be used when bootstraping Flatcar Linux to create/change the user &lt;code>core&lt;/code> to allow SSH authentication with the following SSH Public Key, and also write a file called &lt;code>/etc/hostname&lt;/code> containing the hostname of the machine. This file will be used by Flatcar CL to configure its hostname.&lt;/p>
&lt;p>Please be aware this is a YAML, you should not copy/paste to not be punished by some missing space/tab :D&lt;/p>
&lt;p>You can now ‘transpile’ this configuration and transform it into a JSON that will be used by Ingition when the VM is booting for the first time.&lt;/p>
&lt;p>Running the command &lt;code>ct --in-file config.yaml --pretty&lt;/code> it shall output a prettified version of an ignition file:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-json" data-lang="json">&lt;span class="ln"> 1&lt;/span>&lt;span class="p">{&lt;/span>
&lt;span class="ln"> 2&lt;/span> &lt;span class="nt">&amp;#34;ignition&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln"> 3&lt;/span> &lt;span class="nt">&amp;#34;config&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{},&lt;/span>
&lt;span class="ln"> 4&lt;/span> &lt;span class="nt">&amp;#34;security&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln"> 5&lt;/span> &lt;span class="nt">&amp;#34;tls&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{}&lt;/span>
&lt;span class="ln"> 6&lt;/span> &lt;span class="p">},&lt;/span>
&lt;span class="ln"> 7&lt;/span> &lt;span class="nt">&amp;#34;timeouts&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{},&lt;/span>
&lt;span class="ln"> 8&lt;/span> &lt;span class="nt">&amp;#34;version&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;2.2.0&amp;#34;&lt;/span>
&lt;span class="ln"> 9&lt;/span> &lt;span class="p">},&lt;/span>
&lt;span class="ln">10&lt;/span> &lt;span class="nt">&amp;#34;networkd&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{},&lt;/span>
&lt;span class="ln">11&lt;/span> &lt;span class="nt">&amp;#34;passwd&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln">12&lt;/span> &lt;span class="nt">&amp;#34;users&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">[&lt;/span>
&lt;span class="ln">13&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln">14&lt;/span> &lt;span class="nt">&amp;#34;name&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;core&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln">15&lt;/span> &lt;span class="nt">&amp;#34;sshAuthorizedKeys&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">[&lt;/span>
&lt;span class="ln">16&lt;/span> &lt;span class="s2">&amp;#34;ssh-rsa AAAAB3NzaC1y...... user@springfield&amp;#34;&lt;/span>
&lt;span class="ln">17&lt;/span> &lt;span class="p">]&lt;/span>
&lt;span class="ln">18&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="ln">19&lt;/span> &lt;span class="p">]&lt;/span>
&lt;span class="ln">20&lt;/span> &lt;span class="p">},&lt;/span>
&lt;span class="ln">21&lt;/span> &lt;span class="nt">&amp;#34;storage&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln">22&lt;/span> &lt;span class="nt">&amp;#34;files&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">[&lt;/span>
&lt;span class="ln">23&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln">24&lt;/span> &lt;span class="nt">&amp;#34;filesystem&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;root&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln">25&lt;/span> &lt;span class="nt">&amp;#34;group&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln">26&lt;/span> &lt;span class="nt">&amp;#34;id&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">0&lt;/span>
&lt;span class="ln">27&lt;/span> &lt;span class="p">},&lt;/span>
&lt;span class="ln">28&lt;/span> &lt;span class="nt">&amp;#34;user&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln">29&lt;/span> &lt;span class="nt">&amp;#34;id&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">0&lt;/span>
&lt;span class="ln">30&lt;/span> &lt;span class="p">},&lt;/span>
&lt;span class="ln">31&lt;/span> &lt;span class="nt">&amp;#34;path&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;/etc/hostname&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln">32&lt;/span> &lt;span class="nt">&amp;#34;contents&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln">33&lt;/span> &lt;span class="nt">&amp;#34;source&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;data:,homer&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln">34&lt;/span> &lt;span class="nt">&amp;#34;verification&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{}&lt;/span>
&lt;span class="ln">35&lt;/span> &lt;span class="p">},&lt;/span>
&lt;span class="ln">36&lt;/span> &lt;span class="nt">&amp;#34;mode&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">420&lt;/span>
&lt;span class="ln">37&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="ln">38&lt;/span> &lt;span class="p">]&lt;/span>
&lt;span class="ln">39&lt;/span> &lt;span class="p">},&lt;/span>
&lt;span class="ln">40&lt;/span> &lt;span class="nt">&amp;#34;systemd&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{}&lt;/span>
&lt;span class="ln">41&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Now you can grab this JSON and convert to base64 that will be read by Flatcar when booting. This does not need to be converted to base64, but the chance to have some bad character in the middle messing with your configuration will be reduced.&lt;/p>
&lt;p>The full command is &lt;code>ct --in-file config.yaml --pretty |base64 -w0&lt;/code> but please BE AWARE that in MacOS/Darwin the base64 command does not have a -w0 flag, so you’ll need to sed/replace all the ending lines, turning the base64 into a full line without breaks, as the following:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="ln">1&lt;/span>ewogICJpZ25pdGlvbiI6IHsKICAgICJjb25maWciOiB7fSwKICAgICJzZWN1cml0eSI6IHsKICAgICAgInRscyI6IHt9CiAgICB9LAogICAgInRpbWVvdXRzIjoge30sCiAgICAidmVyc2lvbiI6ICIyLjIuMCIKICB9LAogICJuZXR3b3JrZCI6IHt9LAogICJwYXNzd2QiOiB7CiAgICAidXNlcnMiOiBbCiAgICAgIHsKICAgICAgICAibmFtZSI6ICJjb3JlIiwKICAgICAgICAic3NoQXV0aG9yaXplZEtleXMiOiBbCiAgICAgICAgICAic3NoLXJzYSBBQUFBQjNOemF[........]
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="deploying-to-vmware-player">Deploying to VMware Player&lt;/h2>
&lt;p>Well, assuming you’ve reached here with the correct base64 file created, containing the correct configuration for Flatcar Container Linux, now you just need to create the Virtual Machine using ovftool and it will be ready to be used.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="ln">1&lt;/span>ovftool --allowExtraConfig --X:enableHiddenProperties &lt;span class="se">\
&lt;/span>&lt;span class="ln">2&lt;/span>&lt;span class="se">&lt;/span>--X:injectOvfEnv --name&lt;span class="o">=&lt;/span>flatcar --memorySize:&lt;span class="s1">&amp;#39;*&amp;#39;&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">3072&lt;/span> &lt;span class="se">\
&lt;/span>&lt;span class="ln">3&lt;/span>&lt;span class="se">&lt;/span>--extraConfig:guestinfo.coreos.config.data.encoding&lt;span class="o">=&lt;/span>base64 &lt;span class="se">\
&lt;/span>&lt;span class="ln">4&lt;/span>&lt;span class="se">&lt;/span>--extraConfig:guestinfo.coreos.config.data&lt;span class="o">=&lt;/span>THE_GENERATED_BASE_64 &lt;span class="se">\
&lt;/span>&lt;span class="ln">5&lt;/span>&lt;span class="se">&lt;/span>--net:&lt;span class="s2">&amp;#34;VM Network&amp;#34;&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;NAT&amp;#34;&lt;/span> flatcar.ova newdir
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Some points in this command:&lt;/p>
&lt;ul>
&lt;li>As said, you don’t need to use a base64 config but will need also to remove the flag &lt;code>--extraConfig:guestinfo.coreos.config.data.encoding&lt;/code>&lt;/li>
&lt;li>You need to replace the value in &lt;code>guestinfo.coreos.config.data&lt;/code> to the base64 generated in the previous step&lt;/li>
&lt;li>You can use whatever network from VMware Player you want, if you want a bridge instead of a Nat just replace to &lt;code>--net:&amp;quot;VM Network&amp;quot;=&amp;quot;Bridge&amp;quot;&lt;/code>&lt;/li>
&lt;li>If the newdir in the end of the command already exists it will just put the vmx from the machine inside that directory&lt;/li>
&lt;li>The &lt;code>guestinfo.coreos.config.data&lt;/code> and &lt;code>guestinfo.coreos.config.data.encoding&lt;/code> are deprecated in favor of guestinfo.ignition.config.* but today this new key only works in Flatcar Alpha release.&lt;/li>
&lt;li>ovftool cannot change the memory size. So even you&amp;rsquo;ve created your machine with the parameter &lt;code>--memorySize:&lt;/code> you&amp;rsquo;ll have to manually change the amount of memory directly in the generated vmx file&lt;/li>
&lt;/ul>
&lt;p>After that, the VM can be turned on with:&lt;/p>
&lt;p>&lt;code>vmplayer newdir/flatcar/flatcar.vmx&lt;/code>&lt;/p>
&lt;p>And voilá, you got a Flatcar Linux machine working.&lt;/p>
&lt;p>Obviously you can grab the OVA and make the same deployment with Container Configuration in the VMPlayer GUI, but once automated this is much faster to create a farm of VMs for lab :)&lt;/p></description></item></channel></rss>